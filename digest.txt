Directory structure:
└── dcat_ecommerce/
    ├── README.md
    ├── Dockerfile
    ├── eslint.config.js
    ├── index.html
    ├── nginx.conf
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── public/
    ├── src/
    │   ├── App.tsx
    │   ├── index.css
    │   ├── main.tsx
    │   ├── vite-env.d.ts
    │   ├── api/
    │   │   └── stocks.ts
    │   ├── components/
    │   │   ├── home/
    │   │   │   ├── BenefitsSection.tsx
    │   │   │   ├── CategoryGrid.tsx
    │   │   │   ├── FeaturedProducts.tsx
    │   │   │   ├── Hero.tsx
    │   │   │   └── PromoSection.tsx
    │   │   ├── layout/
    │   │   │   ├── Footer.tsx
    │   │   │   ├── Header.tsx
    │   │   │   └── Layout.tsx
    │   │   └── ui/
    │   │       ├── LoadingSpinner.tsx
    │   │       ├── ProductCard.tsx
    │   │       └── SearchBar.tsx
    │   ├── context/
    │   │   ├── AuthContext.tsx
    │   │   └── CartContext.tsx
    │   ├── data/
    │   │   └── products.ts
    │   ├── firebase/
    │   │   └── firebase.ts
    │   ├── pages/
    │   │   ├── AccountPage.tsx
    │   │   ├── CartPage.tsx
    │   │   ├── CatalogPage.tsx
    │   │   ├── HistoryCartPage.tsx
    │   │   ├── HomePage.tsx
    │   │   ├── LoginPage.tsx
    │   │   ├── NotFoundPage.tsx
    │   │   ├── ProductPage.tsx
    │   │   └── RegisterPage.tsx
    │   └── types/
    │       └── product.ts
    └── .github/
        └── workflows/
            └── main.yml

================================================
File: README.md
================================================
[Non-text file]


================================================
File: Dockerfile
================================================
# # Build Stage
# FROM node:18-alpine AS build

# WORKDIR /app

# # Copier les fichiers package.json et package-lock.json
# COPY package.json package-lock.json ./

# # Installer les dÃ©pendances avec npm
# RUN npm ci

# # Copier les variables d'environnement (si utilisÃ©es dans le build)
# COPY .env ./

# # Copier tout le code source
# COPY . ./

# # Build du projet (adapter selon ton framework : vite, react-scripts, etc.)
# RUN npm run build

# # VÃ©rifie le contenu du build (utile pour le debug)
# RUN ls -la /app/dist

# # Production Stage avec NGINX
# FROM nginx:alpine AS production

# # Copier le build du stage prÃ©cÃ©dent
# COPY --from=build /app/dist /usr/share/nginx/html

# # Copier une configuration nginx personnalisÃ©e (facultatif)
# COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# # Exposer le port utilisÃ© dans nginx.conf (par dÃ©faut 80, sinon adapter ici)
# EXPOSE 9090

# # DÃ©marrer nginx
# CMD ["nginx", "-g", "daemon off;"]
# Ã‰tape 1 - Build Vite avec les variables d'env
FROM node:18-alpine AS build

WORKDIR /app

# Copier package.json
COPY package.json package-lock.json ./

# Installer les dÃ©pendances
RUN npm ci

# Copier les sources + fichier .env gÃ©nÃ©rÃ© par GitHub Actions
COPY . .

# Lancer le build (les variables VITE_ seront injectÃ©es ici)
RUN npm run build

# Ã‰tape 2 - Serveur nginx pour hÃ©berger le site statique
FROM nginx:alpine AS production

# Copier le build de l'Ã©tape prÃ©cÃ©dente
COPY --from=build /app/dist /usr/share/nginx/html

# Ajouter config nginx personnalisÃ©e si besoin
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 9090

CMD ["nginx", "-g", "daemon off;"]



================================================
File: eslint.config.js
================================================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);



================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DCAT Shop - Professional Audio & Visual Equipment</title>
    <meta name="description" content="Discover premium audio-visual equipment for professionals and enthusiasts. Microphones, headphones, interfaces, mixers and more." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


================================================
File: nginx.conf
================================================
server {
    listen       0.0.0.0:9090;
    listen  [::]:9090;
    # server_name  localhost;
    # server_name  172.23.98.172;


    # Ajouter ou modifier la CSP pour autoriser des origines spÃ©cifiques
    # add_header Content-Security-Policy "frame-ancestors *;";
    # add_header Access-Control-Allow-Origin "https://keycloak-mercury.todoustudio.cloud/ " always;

    # RÃ©pertoire racine pour servir les fichiers
    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # Redirection des requÃªtes vers index.html pour les routes SPA
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Rediriger les pages d'erreur vers /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}



================================================
File: package.json
================================================
{
  "name": "audiopro-ecommerce",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.9.0",
    "cors": "^2.8.5",
    "firebase": "^11.7.3",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.22.3",
    "react-slick": "^0.30.2",
    "slick-carousel": "^1.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@types/react-slick": "^0.23.13",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}



================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],
        serif: ['Playfair Display', 'ui-serif', 'Georgia', 'serif'],
      },
      colors: {
        slate: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
        amber: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
      },
    },
    container: {
      center: true,
      padding: {
        DEFAULT: '1rem',
        sm: '2rem',
        lg: '4rem',
        xl: '5rem',
      },
    },
  },
  plugins: [],
};






================================================
File: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}



================================================
File: tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



================================================
File: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
File: vite.config.ts
================================================
import path from "path"
// import tailwindcss from "@tailwindcss/vite"
import { defineConfig } from 'vite'
// import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  // plugins: [react(), tailwindcss()],
  server: {
    host: '0.0.0.0', // Ã‰couter sur toutes les interfaces rÃ©seau
    port: 9090,      // Port du serveur de dÃ©veloppement
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})




================================================
File: src/App.tsx
================================================
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import CatalogPage from './pages/CatalogPage';
import ProductPage from './pages/ProductPage';
import CartPage from './pages/CartPage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import AccountPage from './pages/AccountPage';
import NotFoundPage from './pages/NotFoundPage';
import Layout from './components/layout/Layout';
import HistoryCartPage from './pages/HistoryCartPage';

function App() {
  return (
    <Routes>
      <Route path="/" element={<Layout />}>
        <Route index element={<HomePage />} />
        <Route path="catalog" element={<CatalogPage />} />
        <Route path="produits/:id" element={<ProductPage />} />
        <Route path="cart" element={<CartPage />} />
        <Route path="order/:id" element={<HistoryCartPage />} />
        <Route path="login" element={<LoginPage />} />
        <Route path="register" element={<RegisterPage />} />
        <Route path="account" element={<AccountPage />} />
        <Route path="*" element={<NotFoundPage />} />
      </Route>
    </Routes>
  );
}

export default App;


================================================
File: src/index.css
================================================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* Custom Font Imports */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600&display=swap');

@layer base {
  :root {
    --color-primary: 15 23 42; /* slate-900 */
    --color-primary-light: 30 41 59; /* slate-800 */
    --color-secondary: 245 158 11; /* amber-500 */
    --color-secondary-light: 251 191 36; /* amber-400 */
    --color-accent: 239 68 68; /* red-500 */
    --color-background: 255 255 255;
    --color-text: 15 23 42; /* slate-900 */
    --color-text-light: 71 85 105; /* slate-600 */
  }

  html {
    @apply scroll-smooth;
  }

  body {
    @apply bg-white text-slate-900 font-sans antialiased;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-serif font-semibold;
  }

  h1 {
    @apply text-4xl md:text-5xl;
  }

  h2 {
    @apply text-3xl md:text-4xl;
  }

  h3 {
    @apply text-2xl md:text-3xl;
  }

  p {
    @apply text-slate-700 leading-relaxed;
  }
}

@layer components {
  .btn {
    @apply inline-flex items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50;
  }

  .btn-primary {
    @apply btn bg-slate-900 text-white hover:bg-slate-800 focus:ring-slate-900;
  }

  .btn-secondary {
    @apply btn bg-amber-500 text-white hover:bg-amber-400 focus:ring-amber-500;
  }

  .btn-outline {
    @apply btn border border-slate-800 text-slate-800 hover:bg-slate-50 focus:ring-slate-800;
  }

  .card {
    @apply bg-white rounded-lg shadow-md overflow-hidden transition-transform hover:shadow-lg hover:-translate-y-1;
  }

  .input {
    @apply block w-full rounded-md border-slate-300 shadow-sm focus:border-amber-500 focus:ring focus:ring-amber-500 focus:ring-opacity-50;
  }

  .badge {
    @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium;
  }

  .badge-primary {
    @apply badge bg-slate-100 text-slate-800;
  }

  .badge-secondary {
    @apply badge bg-amber-100 text-amber-800;
  }
  
  .container {
    @apply px-4 mx-auto max-w-7xl;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-out;
}

@keyframes slideInFromBottom {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

.animate-slide-in {
  animation: slideInFromBottom 0.5s ease-out;
}


================================================
File: src/main.tsx
================================================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { CartProvider } from './context/CartContext';
import { AuthProvider } from './context/AuthContext';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <CartProvider>
          <App />
        </CartProvider>
      </AuthProvider>
    </BrowserRouter>
  </StrictMode>
);


================================================
File: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
File: src/api/stocks.ts
================================================
import axios from 'axios';
import { Product, Famille, Marque, PaginatedResponse } from '../types/product';

const API_URL = import.meta.env.VITE_API_URL;

interface ProductFilters {
  page?: number;
  limit?: number;
  prixMin?: number;
  prixMax?: number;
  familleLibelle?: string;
  marqueLibelle?: string;
  inStockOnly?: boolean;
  sortBy?: 'updated_at' | 'prix_produit';
  sortOrder?: 'asc' | 'desc';
  exclude?: string;
}

export const stocksApi = {
  getProducts: async (filters: ProductFilters = {}): Promise<PaginatedResponse<Product>> => {
    try {
      const params: Record<string, any> = {
        page: filters.page || 1,
        limit: filters.limit || 10,
      };

      if (filters.prixMin !== undefined) params.prixMin = filters.prixMin;
      if (filters.prixMax !== undefined) params.prixMax = filters.prixMax;
      if (filters.familleLibelle) params.familleLibelle = filters.familleLibelle;
      if (filters.marqueLibelle) params.marqueLibelle = filters.marqueLibelle;
      if (filters.inStockOnly) params.inStockOnly = true;
      if (filters.sortBy) params.sortBy = filters.sortBy;
      if (filters.sortOrder) params.sortOrder = filters.sortOrder;
      if (filters.exclude) params.exclude = filters.exclude;

      const response = await axios.get(`${API_URL}/api/stocks/produits`, { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching products:', error);
      throw error;
    }
  },

  getProductById: async (id: number): Promise<Product> => {
    try {
      const response = await axios.get(`${API_URL}/api/stocks/produits/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching product ${id}:`, error);
      throw error;
    }
  },

  getFamilles: async (): Promise<Famille[]> => {
    try {
      const response = await axios.get(`${API_URL}/api/stocks/familles`);
      return response.data;
    } catch (error) {
      console.error('Error fetching familles:', error);
      throw error;
    }
  },

  getMarques: async (): Promise<Marque[]> => {
    try {
      const response = await axios.get(`${API_URL}/api/stocks/marques`);
      return response.data;
    } catch (error) {
      console.error('Error fetching marques:', error);
      throw error;
    }
  },
};


================================================
File: src/components/home/BenefitsSection.tsx
================================================
import React from 'react';
import { Zap, ShieldCheck, RefreshCw } from "lucide-react";

interface BenefitItem {
  icon: React.ReactNode;
  title: string;
  description: string;
}

interface BenefitsSectionProps {
  benefits?: BenefitItem[]; // Optionnel pour permettre la personnalisation
}

const BenefitsSection: React.FC<BenefitsSectionProps> = ({ benefits }) => {
  const defaultBenefits: BenefitItem[] = [
    {
      icon: <Zap className="h-6 w-6 text-amber-500" />,
      title: "ExpÃ©dition rapide",
      description: "Commandes prÃ©parÃ©es et envoyÃ©es dans un dÃ©lai trÃ¨s court",
    },
    {
      icon: <ShieldCheck className="h-6 w-6 text-amber-500" />,
      title: "Produit authentique",
      description: "QualitÃ© garantie, sans contrefaÃ§on",
    },
    {
      icon: <RefreshCw className="h-6 w-6 text-amber-500" />,
      title: "Service d'installation",
      description: "Nous proposons l'installation professionnelle de vos produits, sur demande",
    },
  ];

  const benefitsToDisplay = benefits || defaultBenefits;

  return (
    <div className="container py-16">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {benefitsToDisplay.map((benefit, index) => (
          <div
            key={index}
            className="bg-slate-50 rounded-xl p-6 flex flex-col items-center text-center"
          >
            <div className="p-3 bg-white rounded-lg shadow-sm mb-4">
              {benefit.icon}
            </div>
            <h3 className="text-xl font-serif font-semibold mb-2">
              {benefit.title}
            </h3>
            <p className="text-slate-600">{benefit.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default BenefitsSection;


================================================
File: src/components/home/CategoryGrid.tsx
================================================
import React from "react";
import { Link } from "react-router-dom";

const categories = [
  {
    id: "audiovisuel",
    name: "Audiovisuels",
    image:
      "https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600",
    description: "MatÃ©riel audio et vidÃ©o pour professionnels",
  },
  {
    id: "informatique",
    name: "Informatiques",
    image:
      "https://images.pexels.com/photos/577769/pexels-photo-577769.jpeg?auto=compress&cs=tinysrgb&w=1600",
    description: "MatÃ©riel informatique pour professionnels",
  },
  {
    id: "tic et domotique",
    name: "TIC & Domotique",
    image:
      "https://images.pexels.com/photos/29091470/pexels-photo-29091470/free-photo-of-collection-d-appareils-pour-maison-intelligente-sur-fond-blanc.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    description: "MatÃ©riel domotique pour professionnels",
  },
  {
    id: "solaire",
    name: "Solaires",
    image:
      "https://www.id-solaire.fr/wp-content/uploads/2020/07/industriels-1-1024x639.jpg",
    description: "Le solaire, une Ã©nergie propre pour un futur durable",
  },
  {
    id: "autres",
    name: "Autres",
    image:
      "https://images.pexels.com/photos/1420709/pexels-photo-1420709.jpeg?auto=compress&cs=tinysrgb&w=1600",
    description: "modules complÃ©mentaires essentiels pour votre configuration",
  },
];

const CategoryGrid: React.FC = () => {
  return (
    <section className="py-16 bg-slate-50">
      <div className="container">
        <h2 className="text-3xl font-serif font-bold text-center mb-12">
          Parcourir Par CatÃ©gorie
        </h2>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {categories.map((category) => (
            <Link
              key={category.id}
              to={`/catalog?category=${category.id}`}
              className="group"
            >
              <div className="card overflow-hidden h-80">
                <div className="relative h-full">
                  {/* Image with overlay */}
                  <img
                    src={category.image}
                    alt={category.name}
                    className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-slate-900/90 via-slate-900/40 to-transparent" />

                  {/* Content */}
                  <div className="absolute bottom-0 left-0 right-0 p-6">
                    <h3 className="text-2xl font-serif font-bold text-white mb-2">
                      {category.name}
                    </h3>
                    <p className="text-slate-200 mb-4">
                      {category.description}
                    </p>
                    <span className="inline-flex items-center text-amber-400 font-medium group-hover:text-amber-300 transition-colors">
                      Parcourir les produits
                      <svg
                        className="ml-2 w-4 h-4 transition-transform group-hover:translate-x-1"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M9 6L15 12L9 18"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </span>
                  </div>
                </div>
              </div>
            </Link>
          ))}
        </div>
      </div>
    </section>
  );
};

export default CategoryGrid;



================================================
File: src/components/home/FeaturedProducts.tsx
================================================
import React from "react";
import { Link } from "react-router-dom";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { productData } from "../../data/products";

const FeaturedProducts: React.FC = () => {
  const featuredProducts = productData
    .filter((product) => product.featured)
    .slice(0, 8);

  // Custom arrow components for the slider
  const PrevArrow = (props: any) => {
    const { onClick } = props;
    return (
      <button
        onClick={onClick}
        className="absolute left-0 top-1/2 -translate-y-1/2 z-10 -ml-5 bg-white rounded-full shadow-md p-2 hover:bg-slate-50 focus:outline-none"
      >
        <ChevronLeft className="h-6 w-6 text-slate-800" />
      </button>
    );
  };

  const NextArrow = (props: any) => {
    const { onClick } = props;
    return (
      <button
        onClick={onClick}
        className="absolute right-0 top-1/2 -translate-y-1/2 z-10 -mr-5 bg-white rounded-full shadow-md p-2 hover:bg-slate-50 focus:outline-none"
      >
        <ChevronRight className="h-6 w-6 text-slate-800" />
      </button>
    );
  };

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 4,
    slidesToScroll: 1,
    prevArrow: <PrevArrow />,
    nextArrow: <NextArrow />,
    responsive: [
      {
        breakpoint: 1280,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 640,
        settings: {
          slidesToShow: 1,
          arrows: false,
        },
      },
    ],
  };

  return (
    <section className="py-16">
      <div className="container">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-10">
          <h2 className="text-3xl font-serif font-bold">Produits en vedette</h2>
          <Link
            to="/catalog"
            className="mt-4 sm:mt-0 text-amber-600 hover:text-amber-700 transition-colors font-medium flex items-center"
          >
            Voir tous les produits
            <ChevronRight className="h-5 w-5 ml-1" />
          </Link>
        </div>

        <div className="px-6">
          <Slider {...settings}>
            {featuredProducts.map((product) => (
              <div key={product.id} className="px-3 pb-6">
                <Link to={`/product/${product.id}`} className="block">
                  <div className="card h-full">
                    <div className="relative pt-[100%]">
                      <img
                        src={product.image}
                        alt={product.name}
                        className="absolute top-0 left-0 w-full h-full object-cover"
                      />
                    </div>
                    <div className="p-4">
                      <div className="flex items-center mb-1">
                        <span className="text-sm text-slate-500">
                          {product.brand}
                        </span>
                        <span className="mx-2 text-slate-300">â€¢</span>
                        <span className="text-sm text-slate-500">
                          {product.category}
                        </span>
                      </div>
                      <h3 className="font-medium text-slate-900 mb-2 line-clamp-2">
                        {product.name}
                      </h3>
                      <div className="flex items-center mb-3"></div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <span className="font-medium text-slate-900">
                            {product.price.toFixed(2)} FCFA
                          </span>
                        </div>
                        {product.inStock ? (
                          <span className="text-xs font-medium text-green-600 bg-green-50 px-2 py-1 rounded">
                            En stock
                          </span>
                        ) : (
                          <span className="text-xs font-medium text-amber-600 bg-red-50 px-2 py-1 rounded">
                            BientÃ´t disponible
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </Link>
              </div>
            ))}
          </Slider>
        </div>
      </div>
    </section>
  );
};

export default FeaturedProducts;



================================================
File: src/components/home/Hero.tsx
================================================
import React from "react";
import { Link } from "react-router-dom";
import { ChevronRight } from "lucide-react";

const Hero: React.FC = () => {
  return (
    <section className="relative h-[600px] overflow-hidden">
      {/* Background image */}
      <div className="absolute inset-0 z-0">
        <img
          src="https://images.pexels.com/photos/1706694/pexels-photo-1706694.jpeg?auto=compress&cs=tinysrgb&w=1600"
          alt="Professional audio equipment"
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-gradient-to-r from-slate-900/80 to-slate-900/30" />
      </div>

      {/* Content */}
      <div className="container relative z-10 h-full flex flex-col justify-center">
        <div className="max-w-xl animate-slide-in">
          <h1 className="text-4xl md:text-5xl lg:text-6xl font-serif font-bold text-white leading-tight mb-4">
            Ã‰quipement Audio Professionnel Pour Toutes Les Radios
          </h1>
          <p className="text-xl text-slate-200 mb-8">
            DÃ©couvrez des Ã©quipements audiovisuels haut de gamme qui donnent vie
            Ã  votre vision crÃ©ative
          </p>
          <div className="flex flex-wrap gap-4">
            <Link to="/catalog" className="btn-primary px-8 py-3">
              Voir la collection
            </Link>
            <Link
              to="/catalog?category=new"
              className="btn text-white hover:text-amber-500 flex items-center transition-colors"
            >
              DÃ©couvrir les nouveautÃ©s
              <ChevronRight className="h-5 w-5 ml-1" />
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;



================================================
File: src/components/home/PromoSection.tsx
================================================
import React from "react";
import { Link } from "react-router-dom";
// import { Headphones, Zap, ShieldCheck, RefreshCw } from "lucide-react";
import { Headphones } from "lucide-react";




const PromoSection: React.FC = () => {
  return (
    <section className="py-16 bg-white">
      <div className="container">
        {/* Main Promo */}
        <div className="bg-slate-900 rounded-2xl overflow-hidden">
          <div className="grid md:grid-cols-2">
            <div className="p-8 md:p-12 flex flex-col justify-center">
              <div className="flex items-center space-x-2 mb-6">
                <Headphones className="h-8 w-8 text-amber-500" />
                <span className="text-2xl font-serif font-bold text-white">
                  DCAT Shop+
                </span>
              </div>
              <h2 className="text-3xl md:text-4xl font-serif font-bold text-white mb-4">
                Rejoignez notre programme d'adhÃ©sion
              </h2>
              <p className="text-slate-300 mb-8 text-lg">
                BÃ©nÃ©ficiez d'avantages exclusifs, d'un accÃ¨s anticipÃ© aux
                nouveaux produits et de rÃ©ductions rÃ©servÃ©es aux membres sur
                votre Ã©quipement audio prÃ©fÃ©rÃ©.
              </p>
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 rounded-full bg-amber-500 flex items-center justify-center mt-0.5">
                    <span className="text-white text-sm font-bold">âœ“</span>
                  </div>
                  <p className="text-white">
                    10 % de rÃ©duction sur tous les articles Ã  prix rÃ©gulier
                  </p>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 rounded-full bg-amber-500 flex items-center justify-center mt-0.5">
                    <span className="text-white text-sm font-bold">âœ“</span>
                  </div>
                  <p className="text-white">Livraison accÃ©lÃ©rÃ©e </p>
                </div>
              </div>
              <div className="mt-8">
                <Link to="/register" className="btn-secondary px-8 py-3">
                  Inscrivez-vous maintenant
                </Link>
              </div>
            </div>
            <div className="relative hidden md:block">
              <img
                src="https://lh3.googleusercontent.com/p/AF1QipP8NDMa0_7nujFXRy-ROLfrLiYwL_hDeYMBHHL6=s1360-w1360-h1020"
                alt="DCAT Shop Membership"
                className="h-full w-full object-cover"
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default PromoSection;



================================================
File: src/components/layout/Footer.tsx
================================================
import React from "react";
import { Link } from "react-router-dom";
import {
  Facebook,
  Twitter,
  Instagram,
  Youtube,
  Mail,
  Phone,
  MapPin,
  Headphones,
} from "lucide-react";

const Footer: React.FC = () => {
  return (
    <footer className="bg-slate-900 text-white pt-16 pb-8">
      <div className="container">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {/* Brand Column */}
          <div>
            <div className="flex items-center space-x-2 mb-6">
              <Headphones className="h-8 w-8 text-amber-500" />
              <span className="text-2xl font-serif font-bold">DACT SHOP</span>
            </div>
            <p className="text-slate-300 mb-6">
              Ã‰quipement audiovisuel haut de gamme pour les professionnels et
              les passionnÃ©s.
            </p>
            <div className="flex space-x-4">
              <a
                href="#"
                className="text-slate-300 hover:text-amber-500 transition-colors"
              >
                <Facebook className="h-5 w-5" />
              </a>
              <a
                href="#"
                className="text-slate-300 hover:text-amber-500 transition-colors"
              >
                <Twitter className="h-5 w-5" />
              </a>
              <a
                href="#"
                className="text-slate-300 hover:text-amber-500 transition-colors"
              >
                <Instagram className="h-5 w-5" />
              </a>
              <a
                href="#"
                className="text-slate-300 hover:text-amber-500 transition-colors"
              >
                <Youtube className="h-5 w-5" />
              </a>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-medium mb-6">Liens rapides</h4>
            <ul className="space-y-3">
              <li>
                <Link
                  to="/"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Home
                </Link>
              </li>
              <li>
                <Link
                  to="/catalog"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Boutique
                </Link>
              </li>
              <li>
                <Link
                  to="/about"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Qui sommes-nous
                </Link>
              </li>
              <li>
                <Link
                  to="/contact"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Contact
                </Link>
              </li>
            </ul>
          </div>

          {/* Categories */}
          <div>
            <h4 className="text-lg font-medium mb-6">Categories</h4>
            <ul className="space-y-3">
              <li>
                <Link
                  to="/catalog?category=microphones"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Audiovisuels
                </Link>
              </li>
              <li>
                <Link
                  to="/catalog?category=headphones"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Informatiques
                </Link>
              </li>
              <li>
                <Link
                  to="/catalog?category=interfaces"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  TIC & Domotique
                </Link>
              </li>
              <li>
                <Link
                  to="/catalog?category=mixers"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Solaires
                </Link>
              </li>
              <li>
                <Link
                  to="/catalog?category=cameras"
                  className="text-slate-300 hover:text-amber-500 transition-colors"
                >
                  Autres
                </Link>
              </li>
            </ul>
          </div>

          {/* Contact Info */}
          <div>
            <h4 className="text-lg font-medium mb-6">Contactez-nous</h4>
            <ul className="space-y-4">
              <li className="flex items-start space-x-3">
                <MapPin className="h-5 w-5 text-amber-500 mt-0.5" />
                <span className="text-slate-300">
                  27 BP 826 Abidjan 27 AngrÃ© ChÃ¢teau immeuble BATIM II 1er Ã©tage
                  porte A108, Abidjan
                </span>
              </li>
              <li className="flex items-center space-x-3">
                <Phone className="h-5 w-5 text-amber-500" />
                <span className="text-slate-300">+225 27 21 37 33 63</span>
              </li>
              <li className="flex items-center space-x-3">
                <Mail className="h-5 w-5 text-amber-500" />
                <span className="text-slate-300">infos@dcat.ci</span>
              </li>
            </ul>
          </div>
        </div>

        <hr className="border-slate-700 my-8" />

        <div className="flex flex-col md:flex-row justify-between items-center">
          <p className="text-slate-400 text-sm mb-4 md:mb-0">
            Â© 2025 DCAT. All rights reserved.
          </p>
          <div className="flex space-x-6">
            <Link
              to="/privacy"
              className="text-slate-400 text-sm hover:text-amber-500 transition-colors"
            >
              Privacy Policy
            </Link>
            <Link
              to="/terms"
              className="text-slate-400 text-sm hover:text-amber-500 transition-colors"
            >
              Terms of Service
            </Link>
            <Link
              to="/shipping"
              className="text-slate-400 text-sm hover:text-amber-500 transition-colors"
            >
              Shipping Policy
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;



================================================
File: src/components/layout/Header.tsx
================================================
import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { Search, ShoppingCart, Menu, X, User, Headphones } from "lucide-react";
import { useCart } from "../../context/CartContext";
import { useAuth } from "../../context/AuthContext";
import SearchBar from "../ui/SearchBar";

const Header: React.FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const location = useLocation();
  const { cartItems } = useCart();
  const { isAuthenticated } = useAuth();

  const totalItems = cartItems.reduce(
    (total, item) => total + item.quantity,
    0
  );

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Close mobile menu when changing routes
  useEffect(() => {
    setIsMobileMenuOpen(false);
    setIsSearchOpen(false);
  }, [location.pathname]);

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
    if (!isMobileMenuOpen) {
      setIsSearchOpen(false);
    }
  };

  const toggleSearch = () => {
    setIsSearchOpen(!isSearchOpen);
    if (!isSearchOpen) {
      setIsMobileMenuOpen(false);
    }
  };

  return (
    <header
      className={`sticky top-0 z-50 w-full transition-all duration-300 ${
        isScrolled ? "bg-white shadow-md" : "bg-transparent"
      }`}
    >
      <div className="container py-4">
        <div className="flex items-center justify-between">
          {/* Logo */}
          <Link to="/" className="flex items-center space-x-2">
            <img 
              src="/logo.png" 
              alt="DCAT Shop Logo" 
              className="h-8 w-auto" // Ajustez la taille selon vos besoins
            />
            <span className="text-2xl font-serif font-bold">Shop</span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            <Link
              to="/"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Accueil
            </Link>
            <Link
              to="/catalog"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Nos Produits
            </Link>
            <Link
              to="/catalog?category=microphones"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Audiovisuels
            </Link>
            <Link
              to="/catalog?category=headphones"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Informatiques
            </Link>
            <Link
              to="/catalog?category=interfaces"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Tic & Domotiques
            </Link>
            <Link
              to="/catalog?category=interfaces"
              className="text-slate-800 hover:text-amber-500 transition-colors"
            >
              Solaires
            </Link>
          </nav>

          {/* Right Actions */}
          <div className="flex items-center space-x-4">
            <button
              onClick={toggleSearch}
              className="p-2 rounded-full hover:bg-slate-100 transition-colors"
              aria-label="Search"
            >
              <Search className="h-5 w-5" />
            </button>

            <Link
              to={isAuthenticated ? "/account" : "/login"}
              className="p-2 rounded-full hover:bg-slate-100 transition-colors"
            >
              <User className="h-5 w-5" />
            </Link>

            <Link
              to="/cart"
              className="relative p-2 rounded-full hover:bg-slate-100 transition-colors"
            >
              <ShoppingCart className="h-5 w-5" />
              {totalItems > 0 && (
                <span className="absolute -top-1 -right-1 flex items-center justify-center w-5 h-5 bg-amber-500 text-white text-xs rounded-full">
                  {totalItems}
                </span>
              )}
            </Link>

            <button
              onClick={toggleMobileMenu}
              className="md:hidden p-2 rounded-full hover:bg-slate-100 transition-colors"
              aria-label={isMobileMenuOpen ? "Close menu" : "Open menu"}
            >
              {isMobileMenuOpen ? (
                <X className="h-5 w-5" />
              ) : (
                <Menu className="h-5 w-5" />
              )}
            </button>
          </div>
        </div>

        {/* Search Bar Dropdown */}
        {isSearchOpen && (
          <div className="absolute left-0 right-0 mt-2 bg-white shadow-lg rounded-b-lg p-4 animate-fade-in">
            <SearchBar onClose={() => setIsSearchOpen(false)} />
          </div>
        )}
      </div>

      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <div className="md:hidden bg-white shadow-lg animate-fade-in">
          <nav className="flex flex-col py-4">
            <Link to="/" className="px-6 py-3 text-slate-800 hover:bg-slate-50">
              Home
            </Link>
            <Link
              to="/catalog"
              className="px-6 py-3 text-slate-800 hover:bg-slate-50"
            >
              Shop
            </Link>
            <Link
              to="/catalog?category=microphones"
              className="px-6 py-3 text-slate-800 hover:bg-slate-50"
            >
              Microphones
            </Link>
            <Link
              to="/catalog?category=headphones"
              className="px-6 py-3 text-slate-800 hover:bg-slate-50"
            >
              Headphones
            </Link>
            <Link
              to="/catalog?category=interfaces"
              className="px-6 py-3 text-slate-800 hover:bg-slate-50"
            >
              Interfaces
            </Link>
          </nav>
        </div>
      )}
    </header>
  );
};

export default Header;



================================================
File: src/components/layout/Layout.tsx
================================================
import React from 'react';
import { Outlet } from 'react-router-dom';
import Header from './Header';
import Footer from './Footer';
import { useLocation } from 'react-router-dom';
import { useEffect } from 'react';

const Layout: React.FC = () => {
  const location = useLocation();

  // Scroll to top on page change
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [location.pathname]);

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export default Layout;


================================================
File: src/components/ui/LoadingSpinner.tsx
================================================
import React from "react";

const LoadingSpinner: React.FC = () => (
  <div className="flex justify-center items-center">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-500"></div>
  </div>
);

export default LoadingSpinner;



================================================
File: src/components/ui/ProductCard.tsx
================================================

import React from 'react';
import { Product } from '../../types/product';
import { Link } from 'react-router-dom';

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const { produit, images, marque } = product;
  
  // Trouver l'image principale (prÃ©fÃ©rer celle avec numÃ©ro_image = '1')
  const mainImage = images.find((img) => img.numero_image === '1')?.url || images[0]?.url;

  return (
    <Link to={`/produits/${produit.id_produit}`} className="h-full">
      <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 h-full flex flex-col">
        <div className="aspect-square bg-gray-100 relative">
          {mainImage ? (
            <img
              src={mainImage}
              alt={produit.desi_produit}
              className="w-full h-full object-cover"
              onError={(e) => {
                (e.target as HTMLImageElement).src = '/placeholder-product.png';
              }}
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-gray-100 text-gray-400">
              <span>Image non disponible</span>
            </div>
          )}
        </div>

        <div className="p-4 flex flex-col flex-grow">
          <div className="mb-2">
            {produit.code_produit && (
              <span className="text-xs text-gray-500">{produit.code_produit}</span>
            )}
            <h3 className="font-medium text-lg line-clamp-1">
              {produit.desi_produit}
            </h3>
            {marque?.libelle_marque && (
              <span className="text-sm text-gray-600">{marque.libelle_marque}</span>
            )}
          </div>

          {produit.desc_produit && (
            <p className="text-gray-600 text-sm mb-2 line-clamp-2 flex-grow">
              {produit.desc_produit}
            </p>
          )}

          {produit.caracteristiques_produit && (
            <p className="text-gray-500 text-xs mb-2 line-clamp-1">
              {produit.caracteristiques_produit}
            </p>
          )}

          <div className="flex justify-between items-center mt-auto">
            <span className="font-bold text-amber-600">
              {produit.prix_produit
                ? `${parseFloat(produit.prix_produit).toLocaleString('fr-FR')} FCFA`
                : 'Prix indisponible'}
            </span>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default ProductCard;



================================================
File: src/components/ui/SearchBar.tsx
================================================
import React, { useState, useEffect, useRef } from 'react';
import { Search, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { productData } from '../../data/products';

interface SearchBarProps {
  onClose?: () => void;
}

const SearchBar: React.FC<SearchBarProps> = ({ onClose }) => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<typeof productData>([]);
  const inputRef = useRef<HTMLInputElement>(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  useEffect(() => {
    if (query.length >= 2) {
      const filteredResults = productData.filter(product => 
        product.name.toLowerCase().includes(query.toLowerCase()) ||
        product.category.toLowerCase().includes(query.toLowerCase()) ||
        product.brand.toLowerCase().includes(query.toLowerCase())
      ).slice(0, 5);
      setResults(filteredResults);
    } else {
      setResults([]);
    }
  }, [query]);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      navigate(`/catalog?search=${encodeURIComponent(query.trim())}`);
      if (onClose) onClose();
    }
  };

  const handleResultClick = (id: string) => {
    navigate(`/product/${id}`);
    if (onClose) onClose();
  };

  return (
    <div className="w-full">
      <form onSubmit={handleSearch} className="relative">
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Search for products..."
          className="w-full px-4 py-3 pl-10 pr-12 rounded-lg border border-slate-300 focus:border-amber-500 focus:ring focus:ring-amber-500 focus:ring-opacity-50"
        />
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400" />
        {query && (
          <button
            type="button"
            onClick={() => setQuery('')}
            className="absolute right-12 top-1/2 transform -translate-y-1/2 p-1 rounded-full hover:bg-slate-100"
          >
            <X className="h-4 w-4 text-slate-400" />
          </button>
        )}
        <button
          type="submit"
          className="absolute right-3 top-1/2 transform -translate-y-1/2 bg-amber-500 text-white p-1 rounded-full hover:bg-amber-600"
        >
          <Search className="h-4 w-4" />
        </button>
      </form>

      {results.length > 0 && (
        <div className="absolute z-10 mt-2 w-full bg-white rounded-lg shadow-lg border border-slate-200 max-h-96 overflow-y-auto">
          <ul>
            {results.map((product) => (
              <li key={product.id} className="border-b border-slate-100 last:border-none">
                <button
                  onClick={() => handleResultClick(product.id)}
                  className="flex items-center p-3 w-full text-left hover:bg-slate-50 transition-colors"
                >
                  <img 
                    src={product.image} 
                    alt={product.name} 
                    className="w-12 h-12 object-cover rounded mr-4" 
                  />
                  <div>
                    <p className="font-medium text-slate-900">{product.name}</p>
                    <p className="text-sm text-slate-500">{product.category} â€¢ {product.brand}</p>
                  </div>
                  <p className="ml-auto font-medium text-amber-600">${product.price.toFixed(2)}</p>
                </button>
              </li>
            ))}
          </ul>
          <div className="p-3 bg-slate-50 border-t border-slate-200">
            <button
              onClick={handleSearch}
              className="w-full text-center text-slate-600 hover:text-amber-600 transition-colors"
            >
              See all results for "{query}"
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default SearchBar;


================================================
File: src/context/AuthContext.tsx
================================================
// import React, { createContext, useContext, useState, useEffect } from 'react';

// interface User {
//   id: string;
//   name: string;
//   email: string;
// }

// interface AuthContextType {
//   user: User | null;
//   isAuthenticated: boolean;
//   login: (email: string, password: string) => Promise<void>;
//   register: (name: string, email: string, password: string) => Promise<void>;
//   logout: () => void;
//   loading: boolean;
//   error: string | null;
//   resetError: () => void;
// }

// const AuthContext = createContext<AuthContextType>({
//   user: null,
//   isAuthenticated: false,
//   login: async () => {},
//   register: async () => {},
//   logout: () => {},
//   loading: false,
//   error: null,
//   resetError: () => {}
// });

// export const useAuth = () => useContext(AuthContext);

// export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
//   const [user, setUser] = useState<User | null>(() => {
//     const savedUser = localStorage.getItem('user');
//     return savedUser ? JSON.parse(savedUser) : null;
//   });
//   const [loading, setLoading] = useState(false);
//   const [error, setError] = useState<string | null>(null);

//   useEffect(() => {
//     if (user) {
//       localStorage.setItem('user', JSON.stringify(user));
//     } else {
//       localStorage.removeItem('user');
//     }
//   }, [user]);

//   // Mock login functionality
//   const login = async (email: string, password: string) => {
//     setLoading(true);
//     setError(null);
    
//     try {
//       // Simulate API call
//       await new Promise(resolve => setTimeout(resolve, 1000));
      
//       // Mock validation
//       if (email === 'demo@example.com' && password === 'password') {
//         setUser({
//           id: '1',
//           name: 'Demo User',
//           email: 'demo@example.com'
//         });
//       } else {
//         throw new Error('Invalid email or password');
//       }
//     } catch (err) {
//       setError((err as Error).message);
//       throw err;
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Mock register functionality
//   const register = async (name: string, email: string, password: string) => {
//     setLoading(true);
//     setError(null);
    
//     try {
//       // Simulate API call
//       await new Promise(resolve => setTimeout(resolve, 1000));
      
//       // Mock validation
//       if (email === 'demo@example.com') {
//         throw new Error('Email already in use');
//       }
      
//       setUser({
//         id: Date.now().toString(),
//         name,
//         email
//       });
//     } catch (err) {
//       setError((err as Error).message);
//       throw err;
//     } finally {
//       setLoading(false);
//     }
//   };

//   const logout = () => {
//     setUser(null);
//   };

//   const resetError = () => {
//     setError(null);
//   };

//   return (
//     <AuthContext.Provider value={{
//       user,
//       isAuthenticated: !!user,
//       login,
//       register,
//       logout,
//       loading,
//       error,
//       resetError
//     }}>
//       {children}
//     </AuthContext.Provider>
//   );
// };





import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { 
  User, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  onAuthStateChanged,
  updateProfile,
  GoogleAuthProvider,
  signInWithPopup,
  UserCredential
} from 'firebase/auth';
import { auth } from '../firebase/firebase';
import axios from 'axios'; // Assurez-vous d'installer axios

// Interface pour les donnÃ©es utilisateur
interface UserData {
  uid: string;
  email: string | null;
  nom: string | null;
  contact?: string | null;
  photoURL?: string | null;
  provider: string; // 'email' ou 'google'
}

// Types pour notre contexte d'authentification
interface AuthContextType {
  currentUser: User | null;
  userData: UserData | null;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<UserCredential>;
  register: (email: string, password: string, nom: string, contact: string) => Promise<void>;
  logout: () => Promise<void>;
  signInWithGoogle: () => Promise<UserCredential>;
  isAuthenticated: boolean;
  updateUserProfile: (data: Partial<UserData>) => Promise<void>;
}

interface AuthProviderProps {
  children: ReactNode;
}

// CrÃ©er le contexte
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Hook personnalisÃ©
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// URL de l'API backend
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';

// Fournisseur du contexte
export function AuthProvider({ children }: AuthProviderProps) {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Synchroniser l'utilisateur avec le backend
  const syncUserWithBackend = async (user: User, additionalData?: { nom?: string, contact?: string }) => {
    try {
      // RÃ©cupÃ©rer le token d'authentification
      const token = await user.getIdToken();

      // PrÃ©parer les donnÃ©es utilisateur
      const userData: UserData = {
        uid: user.uid,
        email: user.email,
        nom: user.displayName || additionalData?.nom || null,
        contact: user.phoneNumber || additionalData?.contact || null,
        photoURL: user.photoURL,
        provider: user.providerData[0]?.providerId === 'google.com' ? 'google' : 'email'
      };

      // Envoyer les donnÃ©es au backend
      const response = await axios.post(`${API_URL}/auth/sync-user`, userData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      // Mettre Ã  jour l'Ã©tat local avec les donnÃ©es du backend
      setUserData(response.data.user);
      
      return response.data.user;
    } catch (error) {
      console.error('Erreur lors de la synchronisation avec le backend:', error);
      throw error;
    }
  };

  // Ã‰couter les changements d'Ã©tat d'authentification
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      setCurrentUser(user);
      
      if (user) {
        try {
          // Synchroniser l'utilisateur avec le backend Ã  chaque connexion
          await syncUserWithBackend(user);
        } catch (error) {
          console.error("Erreur lors de la synchronisation initiale:", error);
        }
      } else {
        setUserData(null);
      }
      
      setIsLoading(false);
    });

    return unsubscribe;
  }, []);

  // Fonction de connexion avec email/mot de passe
  const login = async (email: string, password: string) => {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    await syncUserWithBackend(userCredential.user);
    return userCredential;
  };

  // Fonction d'inscription avec email/mot de passe
  const register = async (email: string, password: string, nom: string, contact: string) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // Mettre Ã  jour le profil avec le nom
      await updateProfile(userCredential.user, {
        displayName: nom
      });
      
      // Synchroniser avec le backend, en incluant le contact
      await syncUserWithBackend(userCredential.user, { nom, contact });
      
      return userCredential;
    } catch (error) {
      console.error("Erreur lors de l'inscription:", error);
      throw error;
    }
  };

  // Fonction de connexion avec Google
  const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    // Demander l'accÃ¨s Ã  l'email et au profil
    provider.addScope('email');
    provider.addScope('profile');
    
    const userCredential = await signInWithPopup(auth, provider);
    
    // RÃ©cupÃ©rer les informations supplÃ©mentaires de Google
    const user = userCredential.user;
    
    // Extraire des informations supplÃ©mentaires si disponibles
    // Note: Google ne fournit pas le numÃ©ro de tÃ©lÃ©phone par dÃ©faut
    // donc nous devrons peut-Ãªtre le demander sÃ©parÃ©ment
    await syncUserWithBackend(user);
    
    return userCredential;
  };

  // Fonction pour mettre Ã  jour le profil utilisateur
  const updateUserProfile = async (data: Partial<UserData>) => {
    if (!currentUser) throw new Error('Aucun utilisateur connectÃ©');
    
    try {
      const token = await currentUser.getIdToken();
      
      // Si nous mettons Ã  jour le nom d'affichage, mettre Ã  jour Firebase Auth aussi
      if (data.nom) {
        await updateProfile(currentUser, {
          displayName: data.nom
        });
      }
      
      // Envoyer la mise Ã  jour au backend
      const response = await axios.put(`${API_URL}/auth/update-profile`, data, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      setUserData(prev => prev ? { ...prev, ...data } : null);
      
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la mise Ã  jour du profil:', error);
      throw error;
    }
  };

  // Fonction de dÃ©connexion
  const logout = async () => {
    await signOut(auth);
    setUserData(null);
  };

  // Valeur du contexte
  const value = {
    currentUser,
    userData,
    isLoading,
    login,
    register,
    logout,
    signInWithGoogle,
    isAuthenticated: currentUser !== null,
    updateUserProfile
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}



================================================
File: src/context/CartContext.tsx
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { Product } from '../types/product';

interface CartItem {
  product: Product;
  quantity: number;
}

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (product: Product, quantity: number) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
  totalItems: number;
  subtotal: number;
}

const CartContext = createContext<CartContextType>({
  cartItems: [],
  addToCart: () => {},
  removeFromCart: () => {},
  updateQuantity: () => {},
  clearCart: () => {},
  totalItems: 0,
  subtotal: 0
});

export const useCart = () => useContext(CartContext);

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>(() => {
    const savedCart = localStorage.getItem('cart');
    return savedCart ? JSON.parse(savedCart) : [];
  });

  useEffect(() => {
    localStorage.setItem('cart', JSON.stringify(cartItems));
  }, [cartItems]);

  const addToCart = (product: Product, quantity: number) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.product.id === product.id);
      
      if (existingItem) {
        return prevItems.map(item => 
          item.product.id === product.id 
            ? { ...item, quantity: item.quantity + quantity } 
            : item
        );
      } else {
        return [...prevItems, { product, quantity }];
      }
    });
  };

  const removeFromCart = (productId: string) => {
    setCartItems(prevItems => prevItems.filter(item => item.product.id !== productId));
  };

  const updateQuantity = (productId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCartItems(prevItems => 
      prevItems.map(item => 
        item.product.id === productId ? { ...item, quantity } : item
      )
    );
  };

  const clearCart = () => {
    setCartItems([]);
  };

  const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);
  
  const subtotal = cartItems.reduce(
    (total, { product, quantity }) => total + product.price * quantity, 
    0
  );

  return (
    <CartContext.Provider value={{
      cartItems,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart,
      totalItems,
      subtotal
    }}>
      {children}
    </CartContext.Provider>
  );
};


================================================
File: src/data/products.ts
================================================
import { Product } from '../types/product';

export const productData: Product[] = [
  {
    id: 'mic-1',
    name: 'ProAudio VM-100 Studio Condenser Microphone',
    category: 'Microphones',
    brand: 'ProAudio',
    price: 249.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/144429/pexels-photo-144429.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/2651794/pexels-photo-2651794.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.8,
    reviews: 124,
    inStock: true,
    featured: true,
    shortDescription: 'Professional large-diaphragm condenser microphone for studio recording with exceptional clarity and detail.',
    description: 'The ProAudio VM-100 is a professional large-diaphragm condenser microphone designed for studio recording. It features a 1-inch gold-sputtered diaphragm, cardioid polar pattern, and a smooth frequency response that captures every detail of your vocal or instrumental performances with exceptional clarity and warmth.',
    features: [
      'Large 1-inch gold-sputtered diaphragm',
      'Cardioid polar pattern for focused recording',
      '20Hz-20kHz frequency response',
      'Includes shock mount and carrying case',
      'Low self-noise and high SPL handling'
    ],
    specifications: [
      { name: 'Type', value: 'Condenser' },
      { name: 'Polar Pattern', value: 'Cardioid' },
      { name: 'Frequency Response', value: '20Hz-20kHz' },
      { name: 'Sensitivity', value: '-38dB (0dB=1V/Pa at 1kHz)' },
      { name: 'Output Impedance', value: '200 ohms' },
      { name: 'Self Noise', value: '16dB (A-weighted)' },
      { name: 'Maximum SPL', value: '132dB' },
      { name: 'Power Requirements', value: '48V phantom power' },
      { name: 'Connector', value: 'XLR 3-pin (male)' },
      { name: 'Dimensions', value: '50mm x 190mm' },
      { name: 'Weight', value: '460g' }
    ],
    dateAdded: '2025-04-10'
  },
  {
    id: 'headphones-1',
    name: 'SoundMaster Pro Studio Monitoring Headphones',
    category: 'Headphones',
    brand: 'SoundMaster',
    price: 179.99,
    discount: 10,
    image: 'https://images.pexels.com/photos/577769/pexels-photo-577769.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/577769/pexels-photo-577769.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/577769/pexels-photo-577769.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/6686455/pexels-photo-6686455.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.6,
    reviews: 87,
    inStock: true,
    featured: true,
    shortDescription: 'Professional closed-back studio headphones with premium sound quality and comfort for extended mixing sessions.',
    description: 'The SoundMaster Pro Studio Monitoring Headphones deliver exceptional sound quality for professional audio production. With large 50mm drivers, closed-back design for excellent isolation, and plush memory foam ear cushions, these headphones provide accurate sound reproduction while ensuring comfort during long studio sessions.',
    features: [
      'Large 50mm neodymium drivers',
      'Closed-back design for excellent isolation',
      'Memory foam ear cushions for extended comfort',
      'Detachable 3m coiled cable',
      'Foldable design for easy storage and transport'
    ],
    specifications: [
      { name: 'Type', value: 'Over-ear, closed-back' },
      { name: 'Driver Size', value: '50mm' },
      { name: 'Frequency Response', value: '10Hz-30kHz' },
      { name: 'Impedance', value: '38 ohms' },
      { name: 'Sensitivity', value: '102dB' },
      { name: 'Maximum Input Power', value: '1600mW' },
      { name: 'Cable', value: 'Detachable 3m coiled cable with 3.5mm plug' },
      { name: 'Adapter', value: 'Â¼" (6.3mm) screw-on adapter included' },
      { name: 'Weight', value: '320g' }
    ],
    dateAdded: '2025-03-22'
  },
  {
    id: 'interface-1',
    name: 'AudioFlow EVO-4 USB Audio Interface',
    category: 'Interfaces',
    brand: 'AudioFlow',
    price: 149.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/164938/pexels-photo-164938.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/164938/pexels-photo-164938.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/164938/pexels-photo-164938.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/2918997/pexels-photo-2918997.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3957987/pexels-photo-3957987.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.7,
    reviews: 56,
    inStock: true,
    featured: false,
    shortDescription: 'Compact 2-in/2-out USB audio interface with high-quality preamps for home recording and podcasting.',
    description: 'The AudioFlow EVO-4 is a compact and easy-to-use USB audio interface designed for home recording, streaming, and podcasting. Featuring two high-quality preamps with 48V phantom power, direct monitoring, and a sleek design with intuitive controls, the EVO-4 delivers professional sound quality in a desktop-friendly package.',
    features: [
      '2 high-quality mic preamps with 48V phantom power',
      'USB-C connection for easy setup',
      'Direct monitoring with zero-latency',
      'Intuitive touch controls and LED level meters',
      'Compatible with Windows, Mac, and iOS devices'
    ],
    specifications: [
      { name: 'Inputs', value: '2 combo XLR/TRS' },
      { name: 'Outputs', value: '2 TRS line outputs' },
      { name: 'Headphone Output', value: '1 x Â¼" stereo' },
      { name: 'Preamp Gain', value: '58dB' },
      { name: 'Frequency Response', value: '20Hz-20kHz (Â±0.1dB)' },
      { name: 'Dynamic Range', value: '113dB' },
      { name: 'Phantom Power', value: '48V' },
      { name: 'Bit Depth/Sample Rate', value: 'Up to 24-bit/96kHz' },
      { name: 'Connectivity', value: 'USB-C' },
      { name: 'Dimensions', value: '140mm x 100mm x 40mm' },
      { name: 'Weight', value: '380g' }
    ],
    dateAdded: '2025-04-05'
  },
  {
    id: 'mixer-1',
    name: 'MixMaster X12 Professional Mixing Console',
    category: 'Mixers',
    brand: 'MixMaster',
    price: 599.99,
    discount: 15,
    image: 'https://images.pexels.com/photos/159206/mixing-table-mixing-music-159206.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/159206/mixing-table-mixing-music-159206.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/159206/mixing-table-mixing-music-159206.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/4090902/pexels-photo-4090902.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/4088234/pexels-photo-4088234.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.9,
    reviews: 32,
    inStock: true,
    featured: true,
    shortDescription: 'Versatile 12-channel mixing console with premium preamps, built-in effects, and USB interface for studio and live sound.',
    description: 'The MixMaster X12 is a professional 12-channel mixing console designed for both studio and live applications. Featuring high-quality preamps, built-in effects, comprehensive EQ, and USB connectivity for multitrack recording, the X12 delivers exceptional sound quality and flexibility for demanding audio professionals.',
    features: [
      '8 mono channels with premium microphone preamps',
      '2 stereo channels for line-level devices',
      '3-band EQ with sweepable mids on each channel',
      'Built-in digital effects processor with 16 presets',
      'USB interface for multitrack recording and playback'
    ],
    specifications: [
      { name: 'Channels', value: '12 (8 mono + 2 stereo)' },
      { name: 'Mic Preamps', value: '8 with 48V phantom power' },
      { name: 'EQ', value: '3-band with sweepable mids' },
      { name: 'Aux Sends', value: '3 (2 pre/post switchable, 1 effects send)' },
      { name: 'Effects', value: '16 presets with parameter control' },
      { name: 'USB Interface', value: '12x12 I/O, 24-bit/48kHz' },
      { name: 'Main Outputs', value: 'XLR and Â¼" TRS' },
      { name: 'Group Outputs', value: '4 (2 stereo pairs)' },
      { name: 'Dimensions', value: '440mm x 450mm x 100mm' },
      { name: 'Weight', value: '6.8kg' }
    ],
    dateAdded: '2025-02-18'
  },
  {
    id: 'mic-2',
    name: 'DynamicPro D78 Dynamic Microphone',
    category: 'Microphones',
    brand: 'DynamicPro',
    price: 129.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/144429/pexels-photo-144429.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/144429/pexels-photo-144429.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/144429/pexels-photo-144429.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/2651794/pexels-photo-2651794.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.5,
    reviews: 78,
    inStock: true,
    featured: false,
    shortDescription: 'Versatile dynamic microphone for vocals, instruments, and broadcast applications with rugged construction.',
    description: 'The DynamicPro D78 is a versatile dynamic microphone designed for a wide range of applications including vocals, instruments, and broadcast. With its cardioid pickup pattern, the D78 effectively rejects off-axis sound while providing warm, clear audio reproduction. Its rugged construction ensures reliable performance in demanding environments.',
    features: [
      'Dynamic capsule with cardioid polar pattern',
      'Frequency response tailored for vocals and instruments',
      'Internal shock mount to reduce handling noise',
      'Rugged metal construction',
      'On/off switch for convenient control'
    ],
    specifications: [
      { name: 'Type', value: 'Dynamic' },
      { name: 'Polar Pattern', value: 'Cardioid' },
      { name: 'Frequency Response', value: '50Hz-15kHz' },
      { name: 'Sensitivity', value: '-54dB (0dB=1V/Pa at 1kHz)' },
      { name: 'Output Impedance', value: '300 ohms' },
      { name: 'Connector', value: 'XLR 3-pin (male)' },
      { name: 'Dimensions', value: '48mm x 180mm' },
      { name: 'Weight', value: '330g' }
    ],
    dateAdded: '2025-03-12'
  },
  {
    id: 'headphones-2',
    name: 'AcousticFlow Wireless Studio Headphones',
    category: 'Headphones',
    brand: 'AcousticFlow',
    price: 249.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/577769/pexels-photo-577769.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/6686455/pexels-photo-6686455.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.7,
    reviews: 62,
    inStock: true,
    featured: true,
    shortDescription: 'Premium wireless studio headphones with aptX HD technology, long battery life, and exceptional sound quality.',
    description: 'The AcousticFlow Wireless Studio Headphones combine the convenience of wireless technology with professional studio sound quality. Featuring aptX HD technology for high-resolution audio transmission, 40mm custom-tuned drivers, and active noise cancellation, these headphones deliver an immersive listening experience. With up to 30 hours of battery life, they\'re perfect for long studio sessions or on-the-go listening.',
    features: [
      'Bluetooth 5.0 with aptX HD for high-resolution audio',
      'Active noise cancellation with ambient mode',
      'Custom-tuned 40mm drivers for accurate sound reproduction',
      'Up to 30 hours of battery life',
      'Included wired option with 3.5mm cable'
    ],
    specifications: [
      { name: 'Type', value: 'Over-ear, closed-back' },
      { name: 'Driver Size', value: '40mm' },
      { name: 'Frequency Response', value: '15Hz-22kHz' },
      { name: 'Impedance', value: '32 ohms' },
      { name: 'Sensitivity', value: '100dB' },
      { name: 'Bluetooth Version', value: '5.0 with aptX HD' },
      { name: 'Battery Life', value: 'Up to 30 hours (ANC on)' },
      { name: 'Charging', value: 'USB-C, fast charging (10min for 3hrs)' },
      { name: 'Weight', value: '285g' }
    ],
    dateAdded: '2025-04-02'
  },
  {
    id: 'camera-1',
    name: 'VisionPro X1 4K Video Camera',
    category: 'Cameras',
    brand: 'VisionPro',
    price: 899.99,
    discount: 10,
    image: 'https://images.pexels.com/photos/51383/photo-camera-subject-photographer-51383.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/51383/photo-camera-subject-photographer-51383.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/51383/photo-camera-subject-photographer-51383.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/274973/pexels-photo-274973.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3497065/pexels-photo-3497065.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.8,
    reviews: 45,
    inStock: true,
    featured: true,
    shortDescription: 'Professional 4K video camera with advanced features for filmmakers, content creators, and video professionals.',
    description: 'The VisionPro X1 is a professional 4K video camera designed for filmmakers, content creators, and video professionals. With its large 1-inch sensor, 10-bit internal recording, and advanced autofocus system, the X1 delivers stunning image quality and versatile performance. The camera features a robust set of controls, multiple recording formats, and expandable connectivity options to meet the demands of professional video production.',
    features: [
      '1-inch CMOS sensor with 4K60p recording',
      '10-bit 4:2:2 internal recording',
      'Advanced phase-detection autofocus system',
      'Dual SD card slots with relay and simultaneous recording',
      'Professional XLR audio inputs with phantom power'
    ],
    specifications: [
      { name: 'Sensor', value: '1-inch CMOS' },
      { name: 'Resolution', value: '4K (3840x2160) up to 60fps' },
      { name: 'Recording Formats', value: 'H.264, H.265, ProRes (with optional upgrade)' },
      { name: 'Bit Depth/Color Sampling', value: '10-bit 4:2:2' },
      { name: 'Lens Mount', value: 'Interchangeable (M4/3)' },
      { name: 'Audio', value: '2x XLR inputs with 48V phantom power, 3.5mm mic input' },
      { name: 'Storage', value: 'Dual SD/SDHC/SDXC (UHS-II)' },
      { name: 'Battery', value: 'Rechargeable lithium-ion, approx. 3hrs recording' },
      { name: 'Dimensions', value: '160mm x 140mm x 110mm' },
      { name: 'Weight', value: '1.2kg (body only)' }
    ],
    dateAdded: '2025-03-15'
  },
  {
    id: 'interface-2',
    name: 'StudioLink Pro 8 Audio Interface',
    category: 'Interfaces',
    brand: 'StudioLink',
    price: 349.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/2918997/pexels-photo-2918997.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/2918997/pexels-photo-2918997.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/2918997/pexels-photo-2918997.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/164938/pexels-photo-164938.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3957987/pexels-photo-3957987.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.6,
    reviews: 38,
    inStock: false,
    featured: false,
    shortDescription: 'Professional 8-in/8-out audio interface with high-quality preamps, extensive I/O, and low-latency performance.',
    description: 'The StudioLink Pro 8 is a professional 8-in/8-out audio interface designed for home studios and professional recording environments. With its high-quality preamps, extensive I/O options, and low-latency performance, the Pro 8 delivers exceptional sound quality and flexibility for recording, mixing, and production workflows. The interface features both USB and Thunderbolt connectivity, ensuring compatibility with a wide range of systems and providing future-proof performance.',
    features: [
      '8 high-quality mic preamps with 48V phantom power',
      '8 analog line outputs and ADAT optical expansion',
      'Thunderbolt and USB connectivity',
      'Low-latency direct monitoring with DSP effects',
      'Dedicated headphone outputs with independent mix control'
    ],
    specifications: [
      { name: 'Inputs', value: '8 combo XLR/TRS (mic/line/instrument)' },
      { name: 'Outputs', value: '8 TRS line outputs, ADAT optical (8-channel)' },
      { name: 'Headphone Outputs', value: '2 x Â¼" stereo with independent control' },
      { name: 'Preamp Gain', value: '65dB' },
      { name: 'Frequency Response', value: '20Hz-20kHz (Â±0.1dB)' },
      { name: 'Dynamic Range', value: '120dB' },
      { name: 'Phantom Power', value: '48V (switchable in groups of 4)' },
      { name: 'Bit Depth/Sample Rate', value: 'Up to 24-bit/192kHz' },
      { name: 'Connectivity', value: 'Thunderbolt 3, USB-C (USB 3.1)' },
      { name: 'Dimensions', value: '483mm x 220mm x 44mm (1U rackmount)' },
      { name: 'Weight', value: '2.6kg' }
    ],
    dateAdded: '2025-02-28'
  },
  {
    id: 'accessory-1',
    name: 'SoundShield Pro Reflection Filter',
    category: 'Accessories',
    brand: 'SoundShield',
    price: 89.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/1420709/pexels-photo-1420709.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/1420709/pexels-photo-1420709.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/1420709/pexels-photo-1420709.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3951630/pexels-photo-3951630.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3951855/pexels-photo-3951855.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.4,
    reviews: 52,
    inStock: true,
    featured: false,
    shortDescription: 'Professional vocal reflection filter for cleaner recordings in untreated rooms, with adjustable mounting system.',
    description: 'The SoundShield Pro Reflection Filter helps you achieve cleaner vocal recordings in untreated rooms. By absorbing and diffusing sound waves, it reduces unwanted room reflections and ambient noise from entering your microphone. The filter features a multi-layer acoustic design with a combination of absorption materials and diffusion panels for effective sound control. With its adjustable mounting system, the Pro Reflection Filter can be positioned precisely for optimal performance with various microphones and stands.',
    features: [
      'Multi-layer acoustic design for effective sound control',
      'Adjustable mounting system for precise positioning',
      'Compatible with most microphone stands',
      'Lightweight yet durable construction',
      'Foldable design for easy storage and transport'
    ],
    specifications: [
      { name: 'Dimensions', value: '34cm x 25cm x 15cm (open)' },
      { name: 'Weight', value: '1.8kg' },
      { name: 'Material', value: 'Multiple acoustic layers, metal frame' },
      { name: 'Mount', value: 'Adjustable bracket for standard mic stands' },
      { name: 'Carrying Case', value: 'Included' }
    ],
    dateAdded: '2025-03-20'
  },
  {
    id: 'mixer-2',
    name: 'CompactMix 8 Portable Mixer',
    category: 'Mixers',
    brand: 'CompactMix',
    price: 199.99,
    discount: 15,
    image: 'https://images.pexels.com/photos/4090902/pexels-photo-4090902.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/4090902/pexels-photo-4090902.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/4090902/pexels-photo-4090902.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/159206/mixing-table-mixing-music-159206.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/4088234/pexels-photo-4088234.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.3,
    reviews: 41,
    inStock: true,
    featured: false,
    shortDescription: 'Compact 8-channel mixer with built-in effects, perfect for small venues, podcasting, and mobile recording.',
    description: 'The CompactMix 8 is a portable 8-channel mixer designed for small venues, podcasting, and mobile recording applications. Despite its compact size, it includes essential features such as high-quality preamps, 3-band EQ, and a built-in digital effects processor. With its durable construction and intuitive layout, the CompactMix 8 offers reliable performance in a space-saving format that\'s easy to transport and set up.',
    features: [
      '4 mono channels with high-quality mic preamps',
      '2 stereo channels for line-level devices',
      '3-band EQ on each channel',
      'Built-in digital effects with 16 presets',
      'USB audio interface for recording and playback'
    ],
    specifications: [
      { name: 'Channels', value: '8 (4 mono + 2 stereo)' },
      { name: 'Mic Preamps', value: '4 with 48V phantom power' },
      { name: 'EQ', value: '3-band' },
      { name: 'Aux Sends', value: '1 FX send, 1 monitor send' },
      { name: 'Effects', value: '16 presets with parameter control' },
      { name: 'USB Interface', value: '2-in/2-out, 16-bit/48kHz' },
      { name: 'Main Outputs', value: 'XLR and Â¼" TRS' },
      { name: 'Headphone Output', value: 'Â¼" stereo' },
      { name: 'Dimensions', value: '260mm x 250mm x 70mm' },
      { name: 'Weight', value: '2.2kg' }
    ],
    dateAdded: '2025-03-25'
  },
  {
    id: 'camera-2',
    name: 'StreamCam Pro 4K Webcam',
    category: 'Cameras',
    brand: 'StreamCam',
    price: 149.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/3497065/pexels-photo-3497065.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/3497065/pexels-photo-3497065.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/3497065/pexels-photo-3497065.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/51383/photo-camera-subject-photographer-51383.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/274973/pexels-photo-274973.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.5,
    reviews: 67,
    inStock: true,
    featured: false,
    shortDescription: 'Professional 4K webcam with AI-powered features, perfect for streamers, content creators, and remote professionals.',
    description: 'The StreamCam Pro 4K Webcam delivers exceptional video quality for streaming, content creation, and professional video conferencing. With its 4K sensor, HDR support, and AI-powered features like auto-framing and intelligent exposure, the StreamCam Pro ensures you look your best in any lighting situation. The camera includes dual noise-canceling microphones, a versatile mounting system, and advanced customization options through the companion software.',
    features: [
      '4K UHD resolution at 30fps (1080p at 60fps)',
      'AI-powered auto-framing and intelligent exposure',
      'HDR support for challenging lighting conditions',
      'Dual noise-canceling microphones',
      'Versatile mounting options with privacy cover'
    ],
    specifications: [
      { name: 'Resolution', value: '4K (3840x2160) at 30fps, 1080p at 60fps' },
      { name: 'Sensor', value: '1/2.8-inch CMOS' },
      { name: 'Field of View', value: '78Â° diagonal (adjustable)' },
      { name: 'Focus', value: 'Autofocus with 5x digital zoom' },
      { name: 'Microphones', value: 'Dual omnidirectional with noise cancellation' },
      { name: 'Connectivity', value: 'USB-C 3.2' },
      { name: 'Mount', value: 'Monitor mount, tripod thread (1/4")' },
      { name: 'Software', value: 'StreamCam Control Center (Windows/Mac)' },
      { name: 'Dimensions', value: '85mm x 58mm x 48mm' },
      { name: 'Weight', value: '156g' }
    ],
    dateAdded: '2025-04-01'
  },
  {
    id: 'accessory-2',
    name: 'ProStand Adjustable Microphone Boom Arm',
    category: 'Accessories',
    brand: 'ProStand',
    price: 69.99,
    discount: 0,
    image: 'https://images.pexels.com/photos/3951630/pexels-photo-3951630.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/3951630/pexels-photo-3951630.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/3951630/pexels-photo-3951630.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/1420709/pexels-photo-1420709.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3951855/pexels-photo-3951855.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.6,
    reviews: 84,
    inStock: true,
    featured: false,
    shortDescription: 'Heavy-duty adjustable microphone boom arm with internal cable management and desk clamp mount.',
    description: 'The ProStand Adjustable Microphone Boom Arm provides stable and flexible positioning for your microphone during recording, podcasting, or streaming sessions. With its heavy-duty construction, smooth movement, and internal cable management, the boom arm offers professional performance and a clean, organized setup. The desk clamp mount ensures secure attachment to various desk thicknesses, while the standard 3/8" thread with 5/8" adapter accommodates most microphones and shock mounts.',
    features: [
      'Heavy-duty construction with smooth, silent movement',
      'Internal cable management for a clean setup',
      'Desk clamp mount with protective padding',
      'Standard 3/8" thread with 5/8" adapter',
      'Supports microphones and accessories up to 1.8kg'
    ],
    specifications: [
      { name: 'Material', value: 'Steel and aluminum construction' },
      { name: 'Arm Length', value: 'Total reach: 83cm extended' },
      { name: 'Mount', value: 'Desk clamp (fits desks up to 60mm thick)' },
      { name: 'Thread Size', value: '3/8" with 5/8" adapter included' },
      { name: 'Weight Capacity', value: '1.8kg' },
      { name: 'Cable Management', value: 'Internal channels' },
      { name: 'Product Weight', value: '1.3kg' }
    ],
    dateAdded: '2025-03-18'
  },
  {
    id: 'mic-3',
    name: 'UltraSound S1 Shotgun Microphone',
    category: 'Microphones',
    brand: 'UltraSound',
    price: 199.99,
    discount: 10,
    image: 'https://images.pexels.com/photos/2651794/pexels-photo-2651794.jpeg?auto=compress&cs=tinysrgb&w=1600',
    imageLarge: 'https://images.pexels.com/photos/2651794/pexels-photo-2651794.jpeg?auto=compress&cs=tinysrgb&w=1600',
    additionalImages: [
      'https://images.pexels.com/photos/2651794/pexels-photo-2651794.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/3783471/pexels-photo-3783471.jpeg?auto=compress&cs=tinysrgb&w=1600',
      'https://images.pexels.com/photos/144429/pexels-photo-144429.jpeg?auto=compress&cs=tinysrgb&w=1600'
    ],
    rating: 4.7,
    reviews: 37,
    inStock: true,
    featured: true,
    shortDescription: 'Compact shotgun microphone for video production with excellent off-axis rejection and natural sound reproduction.',
    description: 'The UltraSound S1 is a professional shotgun microphone designed for video production, field recording, and broadcast applications. With its super-cardioid polar pattern and precision-engineered acoustic design, the S1 delivers focused audio capture with excellent off-axis rejection and natural sound reproduction. The microphone features a durable, lightweight construction, low handling noise, and versatile mounting options for cameras and boom poles.',
    features: [
      'Super-cardioid polar pattern for focused audio capture',
      'Low self-noise and high sensitivity design',
      'Integrated shock mounting system',
      'Low-cut filter and -10dB pad switches',
      'Battery or phantom powered operation'
    ],
    specifications: [
      { name: 'Type', value: 'Condenser shotgun microphone' },
      { name: 'Polar Pattern', value: 'Super-cardioid/lobar' },
      { name: 'Frequency Response', value: '40Hz-20kHz' },
      { name: 'Sensitivity', value: '-32dB (0dB=1V/Pa at 1kHz)' },
      { name: 'Self Noise', value: '12dB (A-weighted)' },
      { name: 'Power Requirements', value: '48V phantom power or AA battery' },
      { name: 'Battery Life', value: 'Approx. 70 hours (alkaline)' },
      { name: 'Output', value: 'XLR 3-pin (male) and 3.5mm TRS' },
      { name: 'Dimensions', value: '21mm x 250mm' },
      { name: 'Weight', value: '178g (without battery)' }
    ],
    dateAdded: '2025-01-15'
  }
];


================================================
File: src/firebase/firebase.ts
================================================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getAnalytics } from "firebase/analytics";

// Votre configuration Firebase depuis les variables d'environnement
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID
};

// Initialisation de Firebase
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const analytics = getAnalytics(app);
export default app;



================================================
File: src/pages/AccountPage.tsx
================================================
import React, { useEffect } from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { Package, User, Heart, CreditCard, LogOut } from "lucide-react";

const AccountPage: React.FC = () => {
  const { user, isAuthenticated, logout } = useAuth();

  useEffect(() => {
    document.title = "Mon compte - DCAT Shop";
  }, []);

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  // Mock order history
  const orders = [
    { id: "ORD-1234", date: "2025-04-15", status: "Delivered", total: 249.99 },
    { id: "ORD-5678", date: "2025-03-21", status: "Shipped", total: 189.5 },
    { id: "ORD-9012", date: "2025-02-10", status: "Processing", total: 399.99 },
  ];

  return (
    <div className="bg-slate-50 min-h-screen py-12">
      <div className="container">
        <h1 className="text-3xl font-serif font-bold mb-8">Mon compte</h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Sidebar */}
          <div className="md:col-span-1">
            <div className="bg-white rounded-lg shadow-sm overflow-hidden">
              <div className="p-6 border-b border-slate-200">
                <div className="flex items-center space-x-3">
                  <div className="bg-slate-100 rounded-full h-12 w-12 flex items-center justify-center">
                    <User className="h-6 w-6 text-slate-600" />
                  </div>
                  <div>
                    <h2 className="font-medium text-slate-900">{user?.name}</h2>
                    <p className="text-sm text-slate-500">{user?.email}</p>
                  </div>
                </div>
              </div>

              <nav className="p-2">
                <a
                  href="#account-info"
                  className="flex items-center space-x-3 px-4 py-3 rounded-md bg-slate-50 text-slate-900"
                >
                  <User className="h-5 w-5 text-slate-600" />
                  <span>Informations sur le compte</span>
                </a>
                <a
                  href="#orders"
                  className="flex items-center space-x-3 px-4 py-3 rounded-md hover:bg-slate-50 text-slate-700 hover:text-slate-900 transition-colors"
                >
                  <Package className="h-5 w-5 text-slate-600" />
                  <span>Ordres</span>
                </a>
                <a
                  href="#"
                  className="flex items-center space-x-3 px-4 py-3 rounded-md hover:bg-slate-50 text-slate-700 hover:text-slate-900 transition-colors"
                >
                  <Heart className="h-5 w-5 text-slate-600" />
                  <span>Liste de souhaits</span>
                </a>
                <a
                  href="#"
                  className="flex items-center space-x-3 px-4 py-3 rounded-md hover:bg-slate-50 text-slate-700 hover:text-slate-900 transition-colors"
                >
                  <CreditCard className="h-5 w-5 text-slate-600" />
                  <span>MÃ©thodes de paiement</span>
                </a>
                <button
                  onClick={logout}
                  className="w-full flex items-center space-x-3 px-4 py-3 rounded-md hover:bg-red-50 text-red-600 hover:text-red-700 transition-colors"
                >
                  <LogOut className="h-5 w-5" />
                  <span>Se dÃ©connecter</span>
                </button>
              </nav>
            </div>
          </div>

          {/* Main Content */}
          <div className="md:col-span-2 space-y-8">
            {/* Account Information */}
            <section
              id="account-info"
              className="bg-white rounded-lg shadow-sm p-6"
            >
              <h2 className="text-xl font-medium mb-6">
                Informations sur le compte
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-sm uppercase text-slate-500 font-medium mb-3">
                    Information Personnelle
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label
                        htmlFor="name"
                        className="block text-sm font-medium text-slate-700 mb-1"
                      >
                        Nom et prÃ©nom
                      </label>
                      <input
                        type="text"
                        id="name"
                        defaultValue={user?.name}
                        className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="email"
                        className="block text-sm font-medium text-slate-700 mb-1"
                      >
                        Adresse email
                      </label>
                      <input
                        type="email"
                        id="email"
                        defaultValue={user?.email}
                        className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="phone"
                        className="block text-sm font-medium text-slate-700 mb-1"
                      >
                        NumÃ©ro de tÃ©lÃ©phone
                      </label>
                      <input
                        type="tel"
                        id="phone"
                        defaultValue="+1 (555) 123-4567"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                      />
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-sm uppercase text-slate-500 font-medium mb-3">
                    adresse de livraison
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label
                        htmlFor="address"
                        className="block text-sm font-medium text-slate-700 mb-1"
                      >
                        Adresse de la rue
                      </label>
                      <input
                        type="text"
                        id="address"
                        defaultValue="123 Main Street"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label
                          htmlFor="city"
                          className="block text-sm font-medium text-slate-700 mb-1"
                        >
                          Ville
                        </label>
                        <input
                          type="text"
                          id="city"
                          defaultValue="San Francisco"
                          className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                        />
                      </div>
                      <div>
                        <label
                          htmlFor="state"
                          className="block text-sm font-medium text-slate-700 mb-1"
                        >
                          Commune
                        </label>
                        <input
                          type="text"
                          id="state"
                          defaultValue="CA"
                          className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                        />
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label
                          htmlFor="zip"
                          className="block text-sm font-medium text-slate-700 mb-1"
                        >
                          Quartier
                        </label>
                        <input
                          type="text"
                          id="zip"
                          defaultValue="94105"
                          className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-6 flex justify-end">
                <button className="btn-primary">
                  Enregistrer les modifications
                </button>
              </div>
            </section>

            {/* Order History */}
            <section id="orders" className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-medium mb-6">
                Historique des commandes
              </h2>

              {orders.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-slate-200">
                    <thead className="bg-slate-50">
                      <tr>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider"
                        >
                          Order ID
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider"
                        >
                          Date
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider"
                        >
                          Status
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider"
                        >
                          Total
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider"
                        >
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-slate-200">
                      {orders.map((order) => (
                        <tr key={order.id} className="hover:bg-slate-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">
                            {order.id}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            {new Date(order.date).toLocaleDateString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm">
                            <span
                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                order.status === "Delivered"
                                  ? "bg-green-100 text-green-800"
                                  : order.status === "Shipped"
                                  ? "bg-blue-100 text-blue-800"
                                  : "bg-amber-100 text-amber-800"
                              }`}
                            >
                              {order.status}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            ${order.total.toFixed(2)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <a
                              href={`/order/${order.id}`}
                              className="text-amber-600 hover:text-amber-900"
                            >
                              Voir
                            </a>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div className="text-center py-8">
                  <Package className="mx-auto h-12 w-12 text-slate-400" />
                  <h3 className="mt-2 text-sm font-medium text-slate-900">
                    Aucune commande pour l'instant
                  </h3>
                  <p className="mt-1 text-sm text-slate-500">
                    Une fois que vous aurez passÃ© une commande, elle apparaÃ®tra
                    ici.
                  </p>
                  <div className="mt-6">
                    <a href="/catalog" className="btn-primary">
                      Parcourir les produits
                    </a>
                  </div>
                </div>
              )}
            </section>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountPage;



================================================
File: src/pages/CartPage.tsx
================================================
import React, { useEffect } from "react";
import { Link } from "react-router-dom";
import { Trash2, Minus, Plus, ShoppingBag } from "lucide-react";
import { useCart } from "../context/CartContext";

const CartPage: React.FC = () => {
  const { cartItems, removeFromCart, updateQuantity, subtotal } = useCart();

  useEffect(() => {
    document.title = "Your Cart - DCAT Shop";
  }, []);

  return (
    <div className="bg-slate-50 min-h-screen">
      <div className="container py-12">
        <h1 className="text-3xl font-serif font-bold mb-8">Panier</h1>

        {cartItems.length > 0 ? (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                <div className="hidden sm:grid grid-cols-12 bg-slate-50 p-4 border-b border-slate-200">
                  <div className="col-span-6">
                    <span className="font-medium">Produit</span>
                  </div>
                  <div className="col-span-2 text-center">
                    <span className="font-medium">Prix</span>
                  </div>
                  <div className="col-span-2 text-center">
                    <span className="font-medium">QuantitÃ©</span>
                  </div>
                  <div className="col-span-2 text-right">
                    <span className="font-medium">Total</span>
                  </div>
                </div>

                {cartItems.map((item) => (
                  <div
                    key={item.product.id}
                    className="grid grid-cols-1 sm:grid-cols-12 p-4 border-b border-slate-200 last:border-b-0 items-center"
                  >
                    {/* Product */}
                    <div className="col-span-6 flex items-center mb-4 sm:mb-0">
                      <div className="relative h-20 w-20 flex-shrink-0 bg-slate-50 rounded-md">
                        <img
                          src={item.product.image}
                          alt={item.product.name}
                          className="h-full w-full object-contain"
                        />
                      </div>
                      <div className="ml-4 flex-1">
                        <Link
                          to={`/product/${item.product.id}`}
                          className="font-medium text-slate-900 hover:text-amber-600 transition-colors mb-1 block"
                        >
                          {item.product.name}
                        </Link>
                        <div className="text-sm text-slate-500">
                          Marque: {item.product.brand}
                        </div>
                        <button
                          onClick={() => removeFromCart(item.product.id)}
                          className="text-red-500 hover:text-red-600 transition-colors text-sm flex items-center mt-2 sm:hidden"
                        >
                          <Trash2 className="h-3 w-3 mr-1" />
                          Retirer
                        </button>
                      </div>
                    </div>

                    {/* Price */}
                    <div className="col-span-2 text-center text-slate-900 mb-4 sm:mb-0">
                      <div className="sm:hidden inline font-medium mr-2">
                        Prix:
                      </div>
                      {item.product.price.toFixed(2)} FCFA
                    </div>

                    {/* Quantity */}
                    <div className="col-span-2 flex justify-center mb-4 sm:mb-0">
                      <div className="flex border border-slate-300 rounded-md">
                        <button
                          onClick={() =>
                            updateQuantity(item.product.id, item.quantity - 1)
                          }
                          className="px-2 py-1 flex items-center justify-center hover:bg-slate-100"
                          aria-label="Decrease quantity"
                        >
                          <Minus className="h-3 w-3" />
                        </button>
                        <input
                          type="number"
                          min="1"
                          value={item.quantity}
                          onChange={(e) =>
                            updateQuantity(
                              item.product.id,
                              parseInt(e.target.value)
                            )
                          }
                          className="w-10 px-2 py-1 text-center focus:outline-none focus:ring-0 border-x border-slate-300"
                        />
                        <button
                          onClick={() =>
                            updateQuantity(item.product.id, item.quantity + 1)
                          }
                          className="px-2 py-1 flex items-center justify-center hover:bg-slate-100"
                          aria-label="Increase quantity"
                        >
                          <Plus className="h-3 w-3" />
                        </button>
                      </div>
                    </div>

                    {/* Total */}
                    <div className="col-span-2 text-right">
                      <div className="font-medium text-slate-900">
                        <div className="sm:hidden inline font-medium mr-2">
                          Total:
                        </div>
                        {(item.product.price * item.quantity).toFixed(2)} FCFA
                      </div>
                      <button
                        onClick={() => removeFromCart(item.product.id)}
                        className="text-red-500 hover:text-red-600 transition-colors text-sm flex items-center mt-1 ml-auto hidden sm:flex"
                      >
                        <Trash2 className="h-3 w-3 mr-1" />
                        Retirer
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-medium mb-6">
                  RÃ©sumÃ© de la commande
                </h2>

                <div className="space-y-4 mb-6">
                  <div className="flex justify-between">
                    <span className="text-slate-600">Total</span>
                    <span className="font-medium">
                      {subtotal.toFixed(2)} FCFA
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-600">ExpÃ©dition</span>
                    <span className="font-medium">
                      {subtotal > 99 ? "Gratuit" : "2000 FCFA"}
                    </span>
                  </div>

                  <div className="border-t border-slate-200 pt-4 mt-4">
                    <div className="flex justify-between">
                      <span className="font-medium">Total</span>
                      <span className="font-bold text-lg">
                        {(
                          subtotal +
                          (subtotal > 99 ? 0 : 10) +
                          subtotal * 0.08
                        ).toFixed(2)}{" "}
                        FCFA
                      </span>
                    </div>
                  </div>
                </div>

                <button className="btn-primary w-full mb-4">
                  Valider la commande
                </button>

                <Link
                  to="/catalog"
                  className="btn-outline w-full flex items-center justify-center"
                >
                  <ShoppingBag className="mr-2 h-4 w-4" />
                  Continuer les achats
                </Link>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-sm p-12 text-center">
            <div className="mx-auto w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mb-6">
              <ShoppingBag className="h-8 w-8 text-slate-400" />
            </div>
            <h2 className="text-2xl font-medium mb-4">Votre panier est vide</h2>
            <p className="text-slate-600 mb-8">
              Il semble que vous n'ayez pas encore ajoutÃ© de produits Ã  votre
              panier.
            </p>
            <Link to="/catalog" className="btn-primary">
              Commencez vos achats
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartPage;



================================================
File: src/pages/CatalogPage.tsx
================================================
import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Filter, ChevronDown, ChevronLeft, ChevronRight } from 'lucide-react';
import ProductCard from '../components/ui/ProductCard';
import { stocksApi } from '../api/stocks';
import { Product, Famille, Marque, PaginatedResponse } from '../types/product';
import LoadingSpinner from '../components/ui/LoadingSpinner';

const CatalogPage: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [productsData, setProductsData] = useState<PaginatedResponse<Product> | null>(null);
  const [familles, setFamilles] = useState<Famille[]>([]);
  const [marques, setMarques] = useState<Marque[]>([]);
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dropdownOpen, setDropdownOpen] = useState(false);

  const page = parseInt(searchParams.get('page') || '1');
  const limit = 3;

  // Filter states
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000000]);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);
  const [sortOption, setSortOption] = useState<'newest' | 'oldest'>('newest');

  const fetchProducts = async (page: number) => {
    try {
      setLoading(true);
      
      // Convert selected IDs to libelles
      const selectedFamilleLibelles = familles
        .filter(f => selectedCategories.includes(f.id_famille.toString()))
        .map(f => f.libelle_famille)
        .join(',');

      const selectedMarqueLibelles = marques
        .filter(m => selectedBrands.includes(m.id_marque?.toString() || ''))
        .map(m => m.libelle_marque || '')
        .filter(Boolean)
        .join(',');

      // Prepare sort parameters
      const sortBy = 'updated_at';
      const sortOrder = sortOption === 'newest' ? 'desc' : 'asc';

      const filters = {
        page,
        limit,
        prixMin: priceRange[0],
        prixMax: priceRange[1],
        familleLibelle: selectedFamilleLibelles,
        marqueLibelle: selectedMarqueLibelles,
        sortBy,
        sortOrder
      };

      const data = await stocksApi.getProducts(filters);
      setProductsData(data);
      
      // Update URL params
      const params: Record<string, string> = { page: page.toString() };
      if (selectedFamilleLibelles) params.familleLibelle = selectedFamilleLibelles;
      if (selectedMarqueLibelles) params.marqueLibelle = selectedMarqueLibelles;
      if (priceRange[0] > 0 || priceRange[1] < 1000000) {
        params.prixMin = priceRange[0].toString();
        params.prixMax = priceRange[1].toString();
      }
      if (sortOption !== 'newest') params.sort = sortOption;
      
      setSearchParams(params);
    } catch (err) {
      setError('Erreur lors du chargement des donnÃ©es');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // Initial fetch
  useEffect(() => {
    document.title = "Catalogue Produits - DCAT Shop";

    const fetchInitialData = async () => {
      try {
        setLoading(true);
        
        // Read filters from URL if present
        const urlFamilleLibelle = searchParams.get('familleLibelle');
        const urlMarqueLibelle = searchParams.get('marqueLibelle');
        const urlPrixMin = searchParams.get('prixMin');
        const urlPrixMax = searchParams.get('prixMax');
        const urlSort = searchParams.get('sort');

        // First load familles and marques
        const [famillesData, marquesData] = await Promise.all([
          stocksApi.getFamilles(),
          stocksApi.getMarques()
        ]);

        setFamilles(famillesData);
        setMarques(marquesData);

        // Convert URL libelles to IDs after data is loaded
        if (urlFamilleLibelle) {
          const familleIds = famillesData
            .filter(f => urlFamilleLibelle.split(',').includes(f.libelle_famille))
            .map(f => f.id_famille.toString());
          setSelectedCategories(familleIds);
        }

        if (urlMarqueLibelle) {
          const marqueIds = marquesData
            .filter(m => m.libelle_marque && urlMarqueLibelle.split(',').includes(m.libelle_marque))
            .map(m => m.id_marque?.toString() || '');
          setSelectedBrands(marqueIds);
        }

        if (urlPrixMin || urlPrixMax) {
          setPriceRange([
            urlPrixMin ? Number(urlPrixMin) : 0,
            urlPrixMax ? Number(urlPrixMax) : 1000000
          ]);
        }

        if (urlSort) {
          setSortOption(urlSort as 'newest' | 'oldest');
        }

        await fetchProducts(page);
      } catch (err) {
        setError('Erreur lors du chargement des donnÃ©es');
        console.error(err);
      }
    };

    fetchInitialData();
  }, []);

  // Refetch products when filters change
  useEffect(() => {
    if (productsData) {
      fetchProducts(1);
    }
  }, [selectedCategories, selectedBrands, priceRange, sortOption]);

  const handlePageChange = (newPage: number) => {
    if (newPage < 1 || newPage > (productsData?.pagination.totalPages || 1)) return;
    fetchProducts(newPage);
  };

  const toggleCategory = (id: string) => {
    setSelectedCategories(prev => 
      prev.includes(id) ? [] : [id] // Single selection
    );
  };

  const toggleBrand = (id: string) => {
    setSelectedBrands(prev => 
      prev.includes(id) ? [] : [id] // Single selection
    );
  };

  const clearFilters = () => {
    setSelectedCategories([]);
    setSelectedBrands([]);
    setPriceRange([0, 1000000]);
    setSortOption('newest');
    setSearchParams({});
  };

  const getSortLabel = () => {
    return sortOption === 'newest' ? 'NouveautÃ©s' : 'AnciennetÃ©';
  };

  if (loading && !productsData) {
    return <LoadingSpinner />;
  }

  if (error) {
    return (
      <div className="container py-8 md:py-12">
        <div className="alert alert-error">
          {error}
        </div>
      </div>
    );
  }

  return (
    <div className="container py-8 md:py-12">
      <h1 className="text-3xl font-bold mb-8">Notre Catalogue</h1>

      {/* Mobile filter toggle */}
      <div className="flex md:hidden justify-between items-center mb-6">
        <button
          onClick={() => setIsFilterOpen(!isFilterOpen)}
          className="btn btn-outline"
        >
          <Filter className="h-4 w-4 mr-2" />
          Filtres
        </button>

        <div className="relative">
          <button 
            className="btn btn-outline flex items-center"
            onClick={() => setDropdownOpen(!dropdownOpen)}
          >
            Trier par: {getSortLabel()}
            <ChevronDown className="h-4 w-4 ml-2" />
          </button>
          
          {dropdownOpen && (
            <div className="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white z-50 border border-gray-100">
              <ul className="py-1">
                <li>
                  <button 
                    className="block w-full text-left px-4 py-2 hover:bg-gray-50"
                    onClick={() => {
                      setSortOption('newest');
                      setDropdownOpen(false);
                    }}
                  >
                    NouveautÃ©s
                  </button>
                </li>
                <li>
                  <button 
                    className="block w-full text-left px-4 py-2 hover:bg-gray-50"
                    onClick={() => {
                      setSortOption('oldest');
                      setDropdownOpen(false);
                    }}
                  >
                    AnciennetÃ©
                  </button>
                </li>
              </ul>
            </div>
          )}
        </div>
      </div>

      <div className="flex flex-col md:flex-row md:space-x-8">
        {/* Filters - Sidebar */}
        <aside className={`md:w-64 flex-shrink-0 pb-6 md:pb-0 ${isFilterOpen ? 'block' : 'hidden'} md:block`}>
          <div className="sticky top-20 space-y-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-medium">Filtres</h2>
              <button onClick={clearFilters} className="text-sm text-primary">
                Tout effacer
              </button>
            </div>

            {/* Categories */}
            <div className="border-b border-base-200 pb-6">
              <h3 className="font-medium mb-4">CatÃ©gories</h3>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {familles.map((famille) => (
                  <label key={famille.id_famille} className="flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selectedCategories.includes(famille.id_famille.toString())}
                      onChange={() => toggleCategory(famille.id_famille.toString())}
                      className="checkbox checkbox-sm checkbox-primary mr-2"
                    />
                    <span>{famille.libelle_famille}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Price Range */}
            <div className="border-b border-base-200 pb-6">
              <h3 className="font-medium mb-4">Gamme de prix</h3>
              <div className="space-y-4">
                <div className="flex space-x-4">
                  <input
                    type="number"
                    min="0"
                    value={priceRange[0]}
                    onChange={(e) => setPriceRange([Number(e.target.value), priceRange[1]])}
                    className="input input-bordered w-full"
                    placeholder="Min"
                  />
                  <span className="flex items-center">Ã </span>
                  <input
                    type="number"
                    min={priceRange[0]}
                    value={priceRange[1]}
                    onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}
                    className="input input-bordered w-full"
                    placeholder="Max"
                  />
                </div>
              </div>
            </div>

            {/* Brands */}
            <div className="border-b border-base-200 pb-6">
              <h3 className="font-medium mb-4">Marques</h3>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {marques.map((marque) => (
                  <label key={marque.id_marque} className="flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selectedBrands.includes(marque.id_marque?.toString() || '')}
                      onChange={() => toggleBrand(marque.id_marque?.toString() || '')}
                      className="checkbox checkbox-sm checkbox-primary mr-2"
                    />
                    <span>{marque.libelle_marque || 'Non spÃ©cifiÃ©'}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        </aside>

        {/* Main Content */}
        <div className="flex-1">
          {/* Desktop sort and pagination info */}
          <div className="hidden md:flex justify-between items-center mb-6">
            <p className="text-gray-600">
              {productsData?.pagination.total || 0} produits trouvÃ©s
            </p>
            <div className="relative">
              <button 
                className="btn btn-outline flex items-center"
                onClick={() => setDropdownOpen(!dropdownOpen)}
              >
                Trier par: {getSortLabel()}
                <ChevronDown className="h-4 w-4 ml-2" />
              </button>
              
              {dropdownOpen && (
                <div className="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white z-50 border border-gray-100">
                  <ul className="py-1">
                    <li>
                      <button 
                        className="block w-full text-left px-4 py-2 hover:bg-gray-50"
                        onClick={() => {
                          setSortOption('newest');
                          setDropdownOpen(false);
                        }}
                      >
                        NouveautÃ©s
                      </button>
                    </li>
                    <li>
                      <button 
                        className="block w-full text-left px-4 py-2 hover:bg-gray-50"
                        onClick={() => {
                          setSortOption('oldest');
                          setDropdownOpen(false);
                        }}
                      >
                        AnciennetÃ©
                      </button>
                    </li>
                  </ul>
                </div>
              )}
            </div>
          </div>

          {/* Products Grid */}
          {productsData?.data && productsData.data.length > 0 ? (
            <>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {productsData.data.map((product) => (
                  <ProductCard key={product.produit.id_produit} product={product} />
                ))}
              </div>

              {/* Pagination */}
              {productsData.pagination.totalPages > 1 && (
                <div className="flex justify-center items-center mt-8 space-x-2">
                  <button
                    onClick={() => handlePageChange(page - 1)}
                    disabled={page === 1}
                    className="btn btn-outline btn-sm"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </button>
                  
                  <span className="px-4 py-2 bg-base-200 rounded-md">
                    Page {page} sur {productsData.pagination.totalPages}
                  </span>
                  
                  <button
                    onClick={() => handlePageChange(page + 1)}
                    disabled={page >= productsData.pagination.totalPages}
                    className="btn btn-outline btn-sm"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </button>
                </div>
              )}
            </>
          ) : (
            <div className="text-center py-16">
              <p className="text-gray-600 mb-4">
                Aucun produit ne correspond Ã  vos filtres.
              </p>
              <button
                onClick={clearFilters}
                className="btn btn-primary"
              >
                Effacer les filtres
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CatalogPage;


================================================
File: src/pages/HistoryCartPage.tsx
================================================
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import {X, ShoppingBag } from "lucide-react";
import { useCart } from "../context/CartContext";


const HistoryCartPage: React.FC = () => {
  const { cartItems, subtotal } = useCart();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [orderStatus] = React.useState<
    "en cours" | "validÃ©e" | "annulÃ©e" | "livrÃ©e" | "retournÃ©e"
  >("en cours");

  const handleCancelClick = () => {
    setIsModalOpen(true);
  };

  const handleConfirmCancel = () => {
    // Ajoute ici la logique d'annulation
    setIsModalOpen(false);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const getStatusStyle = (status: string) => {
    switch (status) {
      case "en cours":
        return "bg-blue-100 text-blue-700 border-blue-300";
      case "validÃ©e":
        return "bg-green-100 text-green-700 border-green-300";
      case "annulÃ©e":
        return "bg-red-100 text-red-700 border-red-300";
      case "livrÃ©e":
        return "bg-amber-100 text-amber-700 border-amber-300";
      case "retournÃ©e":
        return "bg-gray-100 text-gray-700 border-gray-300";
      default:
        return "bg-slate-100 text-slate-700 border-slate-300";
    }
  };

  useEffect(() => {
    document.title = "Your Cart - DCAT Shop";
  }, []);

  return (
    <div className="bg-slate-50 min-h-screen">
      <div className="container py-12">
        <h1 className="text-3xl font-serif font-bold mb-8">Panier</h1>

        {cartItems.length > 0 ? (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                <div className="hidden sm:grid grid-cols-12 bg-slate-50 p-4 border-b border-slate-200">
                  <div className="col-span-6">
                    <span className="font-medium">Produit</span>
                  </div>
                  <div className="col-span-2 text-center">
                    <span className="font-medium">Prix</span>
                  </div>
                  <div className="col-span-2 text-center">
                    <span className="font-medium">QuantitÃ©</span>
                  </div>
                  <div className="col-span-2 text-right">
                    <span className="font-medium">Total</span>
                  </div>
                </div>

                {cartItems.map((item) => (
                  <div
                    key={item.product.id}
                    className="grid grid-cols-1 sm:grid-cols-12 p-4 border-b border-slate-200 last:border-b-0 items-center"
                  >
                    {/* Product */}
                    <div className="col-span-6 flex items-center mb-4 sm:mb-0">
                      <div className="relative h-20 w-20 flex-shrink-0 bg-slate-50 rounded-md">
                        <img
                          src={item.product.image}
                          alt={item.product.name}
                          className="h-full w-full object-contain"
                        />
                      </div>
                      <div className="ml-4 flex-1">
                        <Link
                          to={`/product/${item.product.id}`}
                          className="font-medium text-slate-900 hover:text-amber-600 transition-colors mb-1 block"
                        >
                          {item.product.name}
                        </Link>
                        <div className="text-sm text-slate-500">
                          Marque: {item.product.brand}
                        </div>
                      </div>
                    </div>

                    {/* Price */}
                    <div className="col-span-2 text-center text-slate-900 mb-4 sm:mb-0">
                      <div className="sm:hidden inline font-medium mr-2">
                        Prix:
                      </div>
                      {item.product.price.toFixed(2)} FCFA
                    </div>

                    {/* Quantity */}
                    <div className="col-span-2 flex justify-center mb-4 sm:mb-0">
                      <div className="flex  rounded-md">
                        <label htmlFor="quantity">{item.quantity}</label>
                      </div>
                    </div>

                    {/* Total */}
                    <div className="col-span-2 text-right">
                      <div className="font-medium text-slate-900">
                        <div className="sm:hidden inline font-medium mr-2">
                          Total:
                        </div>
                        {(item.product.price * item.quantity).toFixed(2)} FCFA
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-medium mb-6">
                  RÃ©sumÃ© de la commande
                </h2>

                {/* Affichage du statut */}
                <div className="mb-4">
                  <span className="text-slate-600 mr-2">Statutâ€¯:</span>
                  <span
                    className={`inline-block px-3 py-1 rounded-full border font-semibold capitalize text-sm ${getStatusStyle(orderStatus)}`}
                  >
                    {orderStatus}
                  </span>
                </div>

                <div className="space-y-4 mb-6">
                  <div className="flex justify-between">
                    <span className="text-slate-600">Total</span>
                    <span className="font-medium">
                      {subtotal.toFixed(2)} FCFA
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-600">ExpÃ©dition</span>
                    <span className="font-medium">
                      {subtotal > 99 ? "Gratuit" : "2000 FCFA"}
                    </span>
                  </div>

                  <div className="border-t border-slate-200 pt-4 mt-4">
                    <div className="flex justify-between">
                      <span className="font-medium">Total</span>
                      <span className="font-bold text-lg">
                        {(
                          subtotal +
                          (subtotal > 99 ? 0 : 10) +
                          subtotal * 0.08
                        ).toFixed(2)}{" "}
                        FCFA
                      </span>
                    </div>
                  </div>
                </div>

                

                <button
                  onClick={handleCancelClick}
                  className="btn-outline w-full flex items-center justify-center text-red-500 hover:text-red-600 transition-colors mb-4"
                >
                  <X className="mr-2 h-4 w-4" />
                  Annuler la commande
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-sm p-12 text-center">
            <div className="mx-auto w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mb-6">
              <ShoppingBag className="h-8 w-8 text-slate-400" />
            </div>
            <h2 className="text-2xl font-medium mb-4">Votre panier est vide</h2>
            <p className="text-slate-600 mb-8">
              Il semble que vous n'ayez pas encore ajoutÃ© de produits Ã  votre
              panier.
            </p>
            <Link to="/catalog" className="btn-primary">
              Commencez vos achats
            </Link>
          </div>
        )}
      </div>

      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-sm mx-4">
            <h3 className="text-lg font-medium mb-4">Confirmer l'annulation</h3>
            <p className="text-slate-600 mb-6">
              ÃŠtes-vous sÃ»r de vouloir annuler cette commande ? Cette action est irrÃ©versible.
            </p>
            <div className="flex space-x-4">
              <button
                onClick={handleConfirmCancel}
                className="flex-1 bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600 transition-colors"
              >
                Confirmer
              </button>
              <button
                onClick={handleCloseModal}
                className="flex-1 border border-slate-300 py-2 px-4 rounded-md hover:bg-slate-50 transition-colors"
              >
                Annuler
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default HistoryCartPage;



================================================
File: src/pages/HomePage.tsx
================================================
import React, { useEffect } from 'react';
import Hero from '../components/home/Hero';
import CategoryGrid from '../components/home/CategoryGrid';
import FeaturedProducts from '../components/home/FeaturedProducts';
import PromoSection from '../components/home/PromoSection';
import BenefitsSection from '../components/home/BenefitsSection';

const HomePage: React.FC = () => {
  useEffect(() => {
    document.title = 'DCAT Shop - Professional Audio & Visual Equipment';
  }, []);

  return (
    <div>
      <Hero />
      <BenefitsSection />
      <CategoryGrid />
      <FeaturedProducts />
      <PromoSection />
    </div>
  );
};

export default HomePage;


================================================
File: src/pages/LoginPage.tsx
================================================
// import React, { useState, useEffect } from "react";
// import { Link, useNavigate } from "react-router-dom";
// import { Mail, Lock, AlertCircle } from "lucide-react";
// import { useAuth } from "../context/AuthContext";

// const LoginPage: React.FC = () => {
//   const [email, setEmail] = useState("");
//   const [password, setPassword] = useState("");
//   const [errorMessage, setErrorMessage] = useState("");
//   const [isSubmitting, setIsSubmitting] = useState(false);

//   const { login, error, resetError, isAuthenticated } = useAuth();
//   const navigate = useNavigate();

//   useEffect(() => {
//     document.title = "Login - DCAT Shop";

//     // If user is already logged in, redirect to home page
//     if (isAuthenticated) {
//       navigate("/");
//     }

//     // Reset auth error on component mount
//     resetError();
//   }, [isAuthenticated, navigate, resetError]);

//   const handleSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();
//     setErrorMessage("");

//     if (!email || !password) {
//       setErrorMessage("Veuillez remplir tous les champs");
//       return;
//     }

//     try {
//       setIsSubmitting(true);
//       await login(email, password);
//       navigate("/");
//     } catch (err) {
//       // Error is handled by the auth context
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   // For the demo, provide default credentials
//   const handleDemoLogin = async () => {
//     setEmail("demo@example.com");
//     setPassword("password");

//     try {
//       setIsSubmitting(true);
//       await login("demo@example.com", "password");
//       navigate("/");
//     } catch (err) {
//       // Error is handled by the auth context
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   return (
//     <div className="min-h-screen bg-slate-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
//       <div className="max-w-md w-full space-y-8">
//         <div className="text-center">
//           <h1 className="text-3xl font-serif font-bold">
//             Connectez-vous Ã  votre compte
//           </h1>
//           <p className="mt-2 text-slate-600">
//             Bienvenue ! Veuillez saisir vos coordonnÃ©es.
//           </p>
//         </div>

//         <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
//           {(error || errorMessage) && (
//             <div className="mb-4 bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md flex items-start">
//               <AlertCircle className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
//               <span>{error || errorMessage}</span>
//             </div>
//           )}

//           <form className="space-y-6" onSubmit={handleSubmit}>
//             <div>
//               <label
//                 htmlFor="email"
//                 className="block text-sm font-medium text-slate-700"
//               >
//                 Adresse email
//               </label>
//               <div className="mt-1 relative">
//                 <input
//                   id="email"
//                   name="email"
//                   type="email"
//                   autoComplete="email"
//                   value={email}
//                   onChange={(e) => setEmail(e.target.value)}
//                   required
//                   className="appearance-none block w-full px-3 py-2 pl-10 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
//                 />
//                 <Mail className="h-5 w-5 text-slate-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
//               </div>
//             </div>

//             <div>
//               <label
//                 htmlFor="password"
//                 className="block text-sm font-medium text-slate-700"
//               >
//                 Mot de passe
//               </label>
//               <div className="mt-1 relative">
//                 <input
//                   id="password"
//                   name="password"
//                   type="password"
//                   autoComplete="current-password"
//                   value={password}
//                   onChange={(e) => setPassword(e.target.value)}
//                   required
//                   className="appearance-none block w-full px-3 py-2 pl-10 border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-amber-500 focus:border-amber-500 sm:text-sm"
//                 />
//                 <Lock className="h-5 w-5 text-slate-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
//               </div>
//             </div>

//             <div className="flex items-center justify-between">
//               <div className="flex items-center">
//                 <input
//                   id="remember-me"
//                   name="remember-me"
//                   type="checkbox"
//                   className="h-4 w-4 text-amber-600 focus:ring-amber-500 border-slate-300 rounded"
//                 />
//                 <label
//                   htmlFor="remember-me"
//                   className="ml-2 block text-sm text-slate-700"
//                 >
//                   Souviens-toi de moi
//                 </label>
//               </div>

//               <div className="text-sm">
//                 <a
//                   href="#"
//                   className="font-medium text-amber-600 hover:text-amber-500"
//                 >
//                   Mot de passe oubliÃ©?
//                 </a>
//               </div>
//             </div>

//             <div>
//               <button
//                 type="submit"
//                 disabled={isSubmitting}
//                 className="group relative w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-900 hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 disabled:opacity-50 disabled:cursor-not-allowed"
//               >
//                 {isSubmitting ? "Connexion..." : "Se connecter"}
//               </button>
//             </div>

//             <div>
//               <button
//                 type="button"
//                 onClick={handleDemoLogin}
//                 className="group relative w-full flex justify-center py-2 px-4 border border-slate-300 rounded-md shadow-sm text-sm font-medium text-slate-700 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500"
//               >
//                 Demo Login (demo@example.com)
//               </button>
//             </div>
//           </form>

//           <div className="mt-6">
//             <div className="relative">
//               <div className="absolute inset-0 flex items-center">
//                 <div className="w-full border-t border-slate-300" />
//               </div>
//               <div className="relative flex justify-center text-sm">
//                 <span className="px-2 bg-white text-slate-500">Or</span>
//               </div>
//             </div>

//             <div className="mt-6 text-center">
//               <p className="text-sm text-slate-600">
//                 Vous n'avez pas de compte ?{" "}
//                 <Link
//                   to="/register"
//                   className="font-medium text-amber-600 hover:text-amber-500"
//                 >
//                   Inscrivez-vous maintenant
//                 </Link>
//               </p>
//             </div>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default LoginPage;



import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { FcGoogle } from 'react-icons/fc';
import { HiMail } from 'react-icons/hi';
import { FiEye, FiEyeOff } from 'react-icons/fi';
import { useAuth } from '../context/AuthContext';

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  
  const { login, signInWithGoogle, isAuthenticated } = useAuth();
  
  // Rediriger si dÃ©jÃ  connectÃ©
  useEffect(() => {
    const redirectTo = new URLSearchParams(location.search).get('redirectTo') || '/';
    if (isAuthenticated) {
      navigate(redirectTo);
    }
  }, [isAuthenticated, navigate, location]);

  // Obtenir l'URL de redirection depuis les query params
  const redirectTo = new URLSearchParams(location.search).get('redirectTo') || '/';

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email || !password) {
      setError('Veuillez remplir tous les champs');
      return;
    }
    
    setError('');
    setLoading(true);
    
    try {
      await login(email, password);
      navigate(redirectTo);
    } catch (err: any) {
      let errorMessage = 'Erreur de connexion. Veuillez rÃ©essayer.';
      
      if (err.code === 'auth/user-not-found' || err.code === 'auth/wrong-password') {
        errorMessage = 'Email ou mot de passe incorrect';
      } else if (err.code === 'auth/invalid-email') {
        errorMessage = 'Format d\'email invalide';
      } else if (err.code === 'auth/too-many-requests') {
        errorMessage = 'Trop de tentatives. Veuillez rÃ©essayer plus tard';
      }
      
      setError(errorMessage);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setError('');
    setLoading(true);
    
    try {
      const result = await signInWithGoogle();
      
      // VÃ©rifier si l'utilisateur doit complÃ©ter son profil
      if (result.needsProfileCompletion) {
        navigate('/complete-profile');
      } else {
        navigate(redirectTo);
      }
    } catch (err: any) {
      if (err.code === 'auth/popup-closed-by-user') {
        // L'utilisateur a fermÃ© la popup, pas d'erreur Ã  afficher
      } else {
        setError('Erreur de connexion avec Google. Veuillez rÃ©essayer.');
        console.error(err);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Connexion Ã  votre compte
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Ou{' '}
          <Link to="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
            crÃ©er un nouveau compte
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {error && (
            <div className="mb-4 bg-red-50 border-l-4 border-red-500 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1-9v4a1 1 0 102 0V9a1 1 0 10-2 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-red-700">{error}</p>
                </div>
              </div>
            </div>
          )}
          
          {/* Bouton Google */}
          <div className="mb-6">
            <button
              onClick={handleGoogleSignIn}
              disabled={loading}
              className="w-full flex justify-center items-center gap-2 bg-white border border-gray-300 rounded-md py-2 px-4 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <FcGoogle className="h-5 w-5" />
              <span>Continuer avec Google</span>
            </button>
          </div>

          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">ou continuer avec email</span>
            </div>
          </div>

          <form className="space-y-6" onSubmit={handleEmailLogin}>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Adresse email
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <HiMail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="vous@exemple.com"
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Mot de passe
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  autoComplete="current-password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="text-gray-400 hover:text-gray-500 focus:outline-none"
                  >
                    {showPassword ? (
                      <FiEyeOff className="h-5 w-5" />
                    ) : (
                      <FiEye className="h-5 w-5" />
                    )}
                  </button>
                </div>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember_me"
                  name="remember_me"
                  type="checkbox"
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label htmlFor="remember_me" className="ml-2 block text-sm text-gray-900">
                  Se souvenir de moi
                </label>
              </div>

              <div className="text-sm">
                <Link to="/forgot-password" className="font-medium text-indigo-600 hover:text-indigo-500">
                  Mot de passe oubliÃ©?
                </Link>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'Connexion en cours...' : 'Se connecter'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;



================================================
File: src/pages/NotFoundPage.tsx
================================================
import React, { useEffect } from "react";
import { Link } from "react-router-dom";
import { HomeIcon } from "lucide-react";

const NotFoundPage: React.FC = () => {
  useEffect(() => {
    document.title = "Page Not Found - DCAT Shop";
  }, []);

  return (
    <div className="min-h-[70vh] flex flex-col items-center justify-center px-4 py-16">
      <h1 className="text-6xl font-bold text-slate-900 mb-4">404</h1>
      <h2 className="text-2xl font-medium text-slate-700 mb-6">
        Page Not Found
      </h2>
      <p className="text-slate-600 text-center max-w-md mb-8">
        La page que vous recherchez a peut-Ãªtre Ã©tÃ© supprimÃ©e, son nom a
        peut-Ãªtre changÃ© ou elle est temporairement indisponible.
      </p>
      <Link to="/" className="btn-primary flex items-center">
        <HomeIcon className="mr-2 h-4 w-4" />
        Retour Ã  la page d'accueil
      </Link>
    </div>
  );
};

export default NotFoundPage;



================================================
File: src/pages/ProductPage.tsx
================================================
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { ChevronRight, Minus, Plus } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { stocksApi } from '../api/stocks';
import { Product } from '../types/product';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ProductCard from '../components/ui/ProductCard';

const ProductPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { addToCart } = useCart();
  const [quantity, setQuantity] = useState(1);
  const [selectedImage, setSelectedImage] = useState(0);
  const [activeTab, setActiveTab] = useState('description');
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [relatedProducts, setRelatedProducts] = useState<Product[]>([]);

  useEffect(() => {
    const fetchProductData = async () => {
      try {
        setLoading(true);
        const productData = await stocksApi.getProductById(Number(id));
        setProduct(productData);

        if (productData.famille?.id_famille) {
          const filters = {
            page: 1,
            limit: 4,
            familleLibelle: productData.famille.libelle_famille,
            exclude: productData.produit.id_produit.toString(),
            sortBy: 'created_at',
            sortOrder: 'desc'
          };

          const relatedResponse = await stocksApi.getProducts(filters);
          setRelatedProducts(relatedResponse.data);
        }

        document.title = `${productData.produit.desi_produit} - DCAT Shop`;
      } catch (err) {
        setError('Produit introuvable ou erreur de chargement');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchProductData();
  }, [id]);

  const decreaseQuantity = () => setQuantity(prev => Math.max(1, prev - 1));
  const increaseQuantity = () => setQuantity(prev => prev + 1);

  const handleAddToCart = () => {
    if (product) {
      addToCart({
        id: product.produit.id_produit,
        name: product.produit.desi_produit,
        price: parseFloat(product.produit.prix_produit),
        image: product.images[0]?.url || '/placeholder-product.png',
        quantity,
        brand: product.marque?.libelle_marque || '',
        category: product.famille?.libelle_famille || '',
        stock: product.produit.qte_produit,
        // location: product.produit.emplacement_produit || ''
      });
    }
  };

  if (loading) return <LoadingSpinner />;
  if (error || !product) {
    return (
      <div className="container py-16 text-center">
        <h1 className="text-3xl font-bold mb-4 text-amber-600">{error || 'Produit introuvable'}</h1>
        <Link to="/catalog" className="btn bg-amber-500 hover:bg-amber-600 text-white px-6 py-3 rounded-md">
          Retour au catalogue
        </Link>
      </div>
    );
  }

  return (
    <div className="container py-8">
      {/* Breadcrumbs */}
      <div className="text-sm breadcrumbs mb-6">
        <ul>
          <li><Link to="/" className="hover:text-amber-600">Accueil</Link></li>
          <li><Link to="/catalog" className="hover:text-amber-600">Catalogue</Link></li>
          <li className="text-amber-600">{product.produit.desi_produit}</li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="grid md:grid-cols-2 gap-8">
        {/* Images */}
        <div className="space-y-4">
          <div className="bg-gray-100 rounded-lg h-96 flex items-center justify-center p-4">
            <img
              src={product.images[selectedImage]?.url || '/placeholder-product.png'}
              alt={product.produit.desi_produit}
              className="max-h-full max-w-full object-contain"
            />
          </div>
          {product.images.length > 1 && (
            <div className="grid grid-cols-4 gap-2">
              {product.images.map((img, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedImage(index)}
                  className={`rounded-md overflow-hidden border-2 transition-all ${
                    selectedImage === index 
                      ? 'border-amber-500 ring-2 ring-amber-200' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <img 
                    src={img.url} 
                    alt="" 
                    className="h-20 w-full object-cover" 
                  />
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Info */}
        <div className="space-y-6">
          <h1 className="text-3xl font-bold text-gray-900">{product.produit.desi_produit}</h1>

          {product.marque?.libelle_marque && (
            <p className="text-lg text-gray-600">
              Marque : <span className="text-amber-600 font-medium">{product.marque.libelle_marque}</span>
            </p>
          )}

          <div className="text-3xl font-extrabold text-amber-600">
            {parseFloat(product.produit.prix_produit).toLocaleString('fr-FR')} FCFA
          </div>

          <div className="space-y-2 text-gray-700">
            <div><span className="font-medium">RÃ©fÃ©rence :</span> {product.produit.code_produit}</div>
            {product.modele?.libelle_modele && (
              <div><span className="font-medium">ModÃ¨le :</span> {product.modele.libelle_modele}</div>
            )}
          </div>

          {/* Quantity and Cart */}
          <div className="flex items-center gap-4 py-6">
            <div className="flex border border-gray-300 rounded-md">
              <button 
                onClick={decreaseQuantity} 
                className="px-3 py-2 hover:bg-gray-50 text-gray-600"
              >
                <Minus size={16} />
              </button>
              <input
                type="number"
                value={quantity}
                onChange={(e) => setQuantity(Math.max(1, Number(e.target.value)))}
                className="w-12 text-center border-x border-gray-300 focus:outline-none"
              />
              <button 
                onClick={increaseQuantity} 
                className="px-3 py-2 hover:bg-gray-50 text-gray-600"
              >
                <Plus size={16} />
              </button>
            </div>
            <button
              onClick={handleAddToCart}
              className="flex-1 bg-amber-500 hover:bg-amber-600 text-white py-3 px-6 rounded-md font-medium transition-colors"
            >
              Ajouter au panier
            </button>
          </div>

          {/* Tabs Navigation */}
          <div className="border-b border-gray-200">
            <div className="flex space-x-8">
              <button
                onClick={() => setActiveTab('description')}
                className={`pb-3 px-1 font-medium relative ${
                  activeTab === 'description' 
                    ? 'text-amber-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Description
                {activeTab === 'description' && (
                  <span className="absolute bottom-0 left-0 right-0 h-0.5 bg-amber-500"></span>
                )}
              </button>
              <button
                onClick={() => setActiveTab('specs')}
                className={`pb-3 px-1 font-medium relative ${
                  activeTab === 'specs' 
                    ? 'text-amber-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                CaractÃ©ristiques
                {activeTab === 'specs' && (
                  <span className="absolute bottom-0 left-0 right-0 h-0.5 bg-amber-500"></span>
                )}
              </button>
            </div>
          </div>

          {/* Tab Content */}
          <div className="py-4">
            {activeTab === 'description' ? (
              <div className="prose max-w-none">
                {product.produit.desc_produit ? (
                  <div className="text-gray-700 whitespace-pre-line">
                    {product.produit.desc_produit}
                  </div>
                ) : (
                  <p className="text-gray-500">Aucune description disponible</p>
                )}
              </div>
            ) : (
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">RÃ©fÃ©rence</h4>
                    <p className="text-gray-900">{product.produit.code_produit}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Categorie</h4>
                    <p className="text-gray-900">{product.famille?.libelle_famille || 'Non spÃ©cifiÃ©'}</p>
                  </div>
                  {product.marque?.libelle_marque && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-500">Marque</h4>
                      <p className="text-gray-900">{product.marque.libelle_marque}</p>
                    </div>
                  )}
                  {product.modele?.libelle_modele && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-500">ModÃ¨le</h4>
                      <p className="text-gray-900">{product.modele.libelle_modele}</p>
                    </div>
                  )}
                </div>

                {product.produit.caracteristiques_produit && (
                  <div className="mt-6">
                    <h4 className="text-sm font-medium text-gray-500 mb-2">CaractÃ©ristiques techniques</h4>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <pre className="text-gray-900 whitespace-pre-wrap font-sans">
                        {product.produit.caracteristiques_produit}
                      </pre>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Related Products */}
      {relatedProducts.length > 0 && (
        <div className="mt-16 pt-8 border-t border-gray-200">
          <h2 className="text-2xl font-bold text-amber-600 mb-6">Produits similaires</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {relatedProducts.map((related) => (
              <ProductCard key={related.produit.id_produit} product={related} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductPage;


================================================
File: src/pages/RegisterPage.tsx
================================================
import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { FcGoogle } from 'react-icons/fc';
import { HiMail, HiUser, HiPhone } from 'react-icons/hi';
import { FiEye, FiEyeOff } from 'react-icons/fi';
import { useAuth } from '../context/AuthContext';

const RegisterPage: React.FC = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nom: '',
    contact: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  
  const { register, signInWithGoogle, isAuthenticated } = useAuth();

  // Rediriger si dÃ©jÃ  connectÃ©
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/');
    }
  }, [isAuthenticated, navigate]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    if (!formData.email || !formData.password || !formData.confirmPassword || !formData.nom || !formData.contact) {
      setError('Veuillez remplir tous les champs');
      return false;
    }

    if (formData.password !== formData.confirmPassword) {
      setError('Les mots de passe ne correspondent pas');
      return false;
    }

    if (formData.password.length < 6) {
      setError('Le mot de passe doit contenir au moins 6 caractÃ¨res');
      return false;
    }

    // Valider le format de l'email avec une regex basique
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('Veuillez entrer une adresse email valide');
      return false;
    }

    // Valider le format du numÃ©ro de tÃ©lÃ©phone (adaptÃ© Ã  votre rÃ©gion)
    const phoneRegex = /^\+?[0-9]{8,15}$/;
    if (!phoneRegex.test(formData.contact)) {
      setError('Format de numÃ©ro de tÃ©lÃ©phone invalide (ex: +22501234567)');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setError('');
    setLoading(true);
    
    try {
      await register(
        formData.email,
        formData.password,
        formData.nom,
        formData.contact
      );
      navigate('/');
    } catch (err: any) {
      let errorMessage = "Erreur lors de l'inscription. Veuillez rÃ©essayer.";
      
      if (err.code === 'auth/email-already-in-use') {
        errorMessage = 'Cet email est dÃ©jÃ  utilisÃ© par un autre compte';
      } else if (err.code === 'auth/invalid-email') {
        errorMessage = 'Format d\'email invalide';
      } else if (err.code === 'auth/weak-password') {
        errorMessage = 'Le mot de passe est trop faible';
      }
      
      setError(errorMessage);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setError('');
    setLoading(true);
    
    try {
      const result = await signInWithGoogle();
      
      if (result.needsProfileCompletion) {
        navigate('/complete-profile');
      } else {
        navigate('/');
      }
    } catch (err: any) {
      if (err.code !== 'auth/popup-closed-by-user') {
        setError('Erreur de connexion avec Google. Veuillez rÃ©essayer.');
        console.error(err);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          CrÃ©er un nouveau compte
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Ou{' '}
          <Link to="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            connectez-vous Ã  votre compte existant
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {error && (
            <div className="mb-4 bg-red-50 border-l-4 border-red-500 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1-9v4a1 1 0 102 0V9a1 1 0 10-2 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-red-700">{error}</p>
                </div>
              </div>
            </div>
          )}

          {/* Bouton Google */}
          <div className="mb-6">
            <button
              onClick={handleGoogleSignIn}
              disabled={loading}
              className="w-full flex justify-center items-center gap-2 bg-white border border-gray-300 rounded-md py-2 px-4 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <FcGoogle className="h-5 w-5" />
              <span>S'inscrire avec Google</span>
            </button>
          </div>

          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">ou s'inscrire avec email</span>
            </div>
          </div>

          <form className="space-y-6" onSubmit={handleSubmit}>
            {/* Nom complet */}
            <div>
              <label htmlFor="nom" className="block text-sm font-medium text-gray-700">
                Nom complet
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <HiUser className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="nom"
                  name="nom"
                  type="text"
                  required
                  value={formData.nom}
                  onChange={handleChange}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="John Doe"
                />
              </div>
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Adresse email
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <HiMail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={formData.email}
                  onChange={handleChange}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="vous@exemple.com"
                />
              </div>
            </div>

            {/* NumÃ©ro de tÃ©lÃ©phone */}
            <div>
              <label htmlFor="contact" className="block text-sm font-medium text-gray-700">
                NumÃ©ro de tÃ©lÃ©phone
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <HiPhone className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="contact"
                  name="contact"
                  type="tel"
                  required
                  value={formData.contact}
                  onChange={handleChange}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="+22501234567"
                />
              </div>
            </div>

            {/* Mot de passe */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Mot de passe
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  required
                  value={formData.password}
                  onChange={handleChange}
                  className="block w-full pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="text-gray-400 hover:text-gray-500 focus:outline-none"
                  >
                    {showPassword ? (
                      <FiEyeOff className="h-5 w-5" />
                    ) : (
                      <FiEye className="h-5 w-5" />
                    )}
                  </button>
                </div>
              </div>
              <p className="mt-1 text-xs text-gray-500">
                Minimum 6 caractÃ¨res
              </p>
            </div>

            {/* Confirmer mot de passe */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmer le mot de passe
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showPassword ? "text" : "password"}
                  required
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="block w-full pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'CrÃ©ation en cours...' : 'CrÃ©er un compte'}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <p className="text-xs text-center text-gray-600">
              En vous inscrivant, vous acceptez nos{' '}
              <Link to="/terms" className="text-indigo-600 hover:text-indigo-500">
                Conditions d'utilisation
              </Link>{' '}
              et notre{' '}
              <Link to="/privacy" className="text-indigo-600 hover:text-indigo-500">
                Politique de confidentialitÃ©
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegisterPage;



================================================
File: src/types/product.ts
================================================
export interface ProductImage {
  id_image: number;
  libelle_image: string;
  lien_image: string;
  numero_image: string;
  url: string;
  created_at: string;
}

export interface ProductDetails {
  id_produit: number;
  code_produit: string;
  desi_produit: string;
  desc_produit: string;
  qte_produit: number;
  emplacement_produit: string | null;
  caracteristiques_produit: string;
  prix_produit: string;
  id_categorie: number;
  id_type_produit: number;
  id_modele: number;
  id_famille: number;
  id_marque: number;
  created_at: string;
  updated_at: string;
}

export interface Product {
  produit: ProductDetails;
  category: {
    id_categorie: number;
    libelle: string;
  };
  type: {
    id_type_produit: number;
    libelle: string;
  };
  modele: {
    id_modele: number;
    libelle_modele: string;
  };
  famille: {
    id_famille: number;
    libelle_famille: string;
  };
  marque: {
    id_marque: number;
    libelle_marque: string | null;
  };
  images: ProductImage[];
}

export interface Famille {
  id_famille: number;
  libelle_famille: string;
}

export interface Marque {
  id_marque: number;
  libelle_marque: string | null;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}


================================================
File: .github/workflows/main.yml
================================================
# name: Frontend-Ecommerce CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   workflow_dispatch:

# jobs:
#   build-and-deploy:
#     runs-on: self-hosted
#     if: contains(github.event.head_commit.message, '[deploy]') || github.event_name == 'workflow_dispatch'
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Show deployment reason
#         run: |
#           if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
#             echo "Deploying due to manual workflow trigger"
#           else
#             echo "Deploying based on commit message: ${{ github.event.head_commit.message }}"
#           fi

#       - name: Setup Node.js (v18)
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Debug - Affiche le chemin et le contenu du workspace
#         run: |
#           pwd
#           ls -la

#       - name: Update .env for the current environment
#         run: |
#           if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
#             echo "# Keycloak settings" > .env
#             echo "VITE_API_URL=${{ secrets.API_URL || 'http://localhost:2000/api' }}" >> .env
#             echo "VITE_ENV=development" >> .env
#           fi

#       - name: Install dependencies, lint and typecheck
#         run: |
#           npm ci
#           npm run lint || true
#           npm run typecheck || echo "Type checking skipped"

#       - name: Build Docker image
#         run: docker build -t dcat-frontend-ecommerce:${{ github.sha }} .

#       - name: Stop existing container
#         run: |
#           docker stop dcat-frontend-ecommerce || true
#           docker rm dcat-frontend-ecommerce || true
#         continue-on-error: true

#       - name: Start new container
#         run: |
#           docker run -d --name dcat-frontend-ecommerce \
#             -p 9090:9090 \
#             --restart unless-stopped \
#             dcat-frontend-ecommerce:${{ github.sha }}

#       - name: Clean up old images
#         run: |
#           docker image prune -af --filter "until=24h"
#         continue-on-error: true



name: Frontend-Ecommerce CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: contains(github.event.head_commit.message, '[deploy]') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Inject environment variables into .env
        run: |
          echo "VITE_API_URL=${{ secrets.API_URL }}" > .env
          echo "VITE_ENV=production" >> .env
          echo "VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env
          echo "VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> .env

      - name: Build Docker image
        run: docker build -t dcat-frontend-ecommerce:${{ github.sha }} .

      - name: Stop and remove existing container
        run: |
          docker stop dcat-frontend-ecommerce || true
          docker rm dcat-frontend-ecommerce || true

      - name: Start new container
        run: |
          docker run -d --name dcat-frontend-ecommerce \
            -p 9090:9090 \
            --restart unless-stopped \
            dcat-frontend-ecommerce:${{ github.sha }}

      - name: Clean up old images
        run: docker image prune -af --filter "until=24h"
        continue-on-error: true


